{"version":3,"file":"window.js","sourceRoot":"","sources":["../../src/main/window.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\nimport { format as formatUrl } from 'url';\nimport { BrowserWindow, Menu, MenuItemConstructorOptions } from 'electron';\n\n\n/* Window-related helpers\n   TODO (#4): Move into the framework */\n\n\nconst isDevelopment = process.env.NODE_ENV !== 'production';\nconst isMacOS = process.platform === 'darwin';\n\n// Keeps track of windows and ensures (?) they do not get garbage collected\nexport var windows: BrowserWindow[] = [];\n\n// Allows to locate window ID by label\nvar windowsByTitle: { [title: string]: BrowserWindow } = {};\n\n\n// Open new window, or focus if one with the same title already exists\nexport interface WindowOpenerParams {\n  title: string,\n  url?: string,\n  component?: string,\n  componentParams?: string,\n  dimensions?: { minHeight?: number, minWidth?: number, width?: number, height?: number },\n  frameless?: boolean,\n  winParams?: any,\n  menuTemplate?: MenuItemConstructorOptions[],\n}\nexport type WindowOpener = (props: WindowOpenerParams) => Promise<BrowserWindow>;\nexport const openWindow: WindowOpener = async ({\n    title,\n    url, component, componentParams,\n    dimensions, frameless,\n    winParams, menuTemplate }) => {\n\n  if ((component || '').trim() === '' && (url || '').trim() === '') {\n    throw new Error(\"openWindow() requires either `component` or `url`\");\n  }\n\n  const _existingWindow = getWindowByTitle(title);\n  if (_existingWindow !== undefined) {\n    _existingWindow.focus();\n    return _existingWindow;\n  }\n\n  const _framelessOpts = {\n    frame: isMacOS ? true : false,\n    titleBarStyle: isMacOS ? 'hiddenInset' : undefined,\n  };\n\n  const _winParams = {\n    width: (dimensions || {}).width,\n    minWidth: (dimensions || {}).minWidth,\n    height: (dimensions || {}).height,\n    minHeight: (dimensions || {}).minHeight,\n    ...(frameless === true ? _framelessOpts : {}),\n    ...winParams,\n  };\n\n  let window: BrowserWindow;\n\n  if (component) {\n    const params = `c=${component}&${componentParams ? componentParams : ''}`;\n    window = await createWindowForLocalComponent(title, params, _winParams);\n  } else if (url) {\n    window = await createWindow(title, url, _winParams);\n  } else {\n    throw new Error(\"Either component or url must be given to openWindow()\");\n  }\n\n  if (menuTemplate && !isMacOS) {\n    window.setMenu(Menu.buildFromTemplate(menuTemplate));\n  }\n\n  windows.push(window);\n  windowsByTitle[title] = window;\n  window.on('closed', () => { delete windowsByTitle[title]; cleanUpWindows(); });\n\n  return window;\n}\n\n\nexport function getWindowByTitle(title: string): BrowserWindow | undefined {\n  return windowsByTitle[title];\n}\n\n\nexport function getWindow(func: (win: BrowserWindow) => boolean): BrowserWindow | undefined {\n  return windows.find(func);\n}\n\n\n// Iterate over array of windows and try accessing window ID.\n// If it throws, window was closed and we remove it from the array.\n// Supposed to be run after any window is closed\nfunction cleanUpWindows() {\n  var deletedWindows: number[] = [];\n  for (const [idx, win] of windows.entries()) {\n    // When accessing the id attribute of a closed window,\n    // it’ll throw. We’ll mark its index for deletion then.\n    try {\n      win.id;\n    } catch (e) {\n      deletedWindows.push(idx - deletedWindows.length);\n    }\n  }\n  for (const idx of deletedWindows) {\n    windows.splice(idx, 1);\n  }\n}\n\n\nfunction createWindowForLocalComponent(title: string, params: string, winParams: any): Promise<BrowserWindow> {\n  let url: string;\n\n  if (isDevelopment) {\n    url = `http://localhost:${process.env.ELECTRON_WEBPACK_WDS_PORT}?${params}`;\n  }\n  else {\n    url = `${formatUrl({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file',\n      slashes: true,\n    })}?${params}`;\n  }\n\n  return createWindow(title, url, winParams);\n}\n\n\nfunction createWindow(title: string, url: string, winParams: any): Promise<BrowserWindow> {\n  const window = new BrowserWindow({\n    webPreferences: {nodeIntegration: true},\n    title: title,\n    show: false,\n    ...winParams\n  });\n\n  const promise = new Promise<BrowserWindow>((resolve, reject) => {\n    window.once('ready-to-show', () => {\n      window.show();\n      resolve(window);\n    });\n  });\n\n  if (isDevelopment) {\n    window.webContents.openDevTools();\n  }\n\n  window.loadURL(url);\n\n  window.webContents.on('devtools-opened', () => {\n    window.focus();\n    setImmediate(() => {\n      window.focus()\n    });\n  });\n\n  return promise;\n}\n"]}