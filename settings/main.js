import * as fs from 'fs-extra';
import { ipcMain } from 'electron';
import { YAMLStorage } from '../storage/main/yaml';
export class Setting {
    constructor(id, label, paneId) {
        this.id = id;
        this.label = label;
        this.paneId = paneId;
    }
    toUseable(val) { return val; }
    ;
    toStoreable(val) { return val; }
    ;
}
export class SettingManager {
    constructor(settingsPath) {
        this.settingsPath = settingsPath;
        this.registry = [];
        this.panes = [];
        this.data = null;
        this.yaml = new YAMLStorage(fs);
    }
    async getValue(id) {
        const setting = this.get(id);
        if (setting) {
            if (this.data === null) {
                let settingsFileExists;
                try {
                    settingsFileExists = (await fs.stat(this.settingsPath)).isFile();
                }
                catch (e) {
                    settingsFileExists = false;
                }
                if (settingsFileExists) {
                    this.data = (await this.yaml.load(this.settingsPath)) || {};
                }
                else {
                    this.data = {};
                }
            }
            const rawVal = this.data[id];
            return rawVal !== undefined ? setting.toUseable(rawVal) : undefined;
        }
        else {
            throw new Error(`Setting to get value for is not found: ${id}`);
        }
    }
    async setValue(id, val) {
        const setting = this.get(id);
        if (setting) {
            const storeable = setting.toStoreable(val);
            this.data[id] = storeable;
            await this.commit();
        }
        else {
            throw new Error(`Setting to set value for is not found: ${id}`);
        }
    }
    async deleteValue(id) {
        delete this.data[id];
        await this.commit();
    }
    async commit() {
        await fs.remove(this.settingsPath);
        await this.yaml.store(this.settingsPath, this.data);
    }
    get(id) {
        return this.registry.find(s => s.id === id);
    }
    register(setting) {
        if (this.panes.find(p => p.id === setting.paneId)) {
            this.registry.push(setting);
        }
        else {
            throw new Error("Invalid pane ID");
        }
    }
    configurePane(pane) {
        this.panes.push(pane);
    }
    setUpAPIEndpoints() {
        ipcMain.on('set-setting', (evt, name, value) => {
            return this.setValue(name, value);
        });
        ipcMain.on('get-setting', (evt, name) => {
            const value = this.getValue(name);
            evt.reply(value);
        });
        ipcMain.on('clear-setting', async (evt, name) => {
            await this.deleteValue(name);
            evt.reply('ok');
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXR0aW5ncy9tYWluLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUvQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRW5DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVVuRCxNQUFNLE9BQU8sT0FBTztJQUNsQixZQUNTLEVBQVUsRUFDVixLQUFhLEVBQ2IsTUFBYztRQUZkLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDVixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFDM0IsU0FBUyxDQUFDLEdBQVksSUFBTyxPQUFPLEdBQVEsQ0FBQSxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQy9DLFdBQVcsQ0FBQyxHQUFNLElBQVMsT0FBTyxHQUFVLENBQUEsQ0FBQyxDQUFDO0lBQUEsQ0FBQztDQUNoRDtBQUdELE1BQU0sT0FBTyxjQUFjO0lBTXpCLFlBQW1CLFlBQW9CO1FBQXBCLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBTC9CLGFBQVEsR0FBbUIsRUFBRSxDQUFDO1FBQzlCLFVBQUssR0FBVyxFQUFFLENBQUM7UUFDbkIsU0FBSSxHQUFlLElBQUksQ0FBQztRQUk5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQVU7UUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU3QixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ3RCLElBQUksa0JBQTJCLENBQUM7Z0JBQ2hDLElBQUk7b0JBQ0Ys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Q0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBUSxFQUFFLElBQVksRUFBRSxFQUFFO1lBQ25ELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLEtBQUssRUFBRSxHQUFRLEVBQUUsSUFBWSxFQUFFLEVBQUU7WUFDM0QsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5cbmltcG9ydCB7IGlwY01haW4gfSBmcm9tICdlbGVjdHJvbic7XG5cbmltcG9ydCB7IFlBTUxTdG9yYWdlIH0gZnJvbSAnLi4vc3RvcmFnZS9tYWluL3lhbWwnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZSB7XG4gIGlkOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGljb24/OiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIFNldHRpbmc8VD4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaWQ6IHN0cmluZyxcbiAgICBwdWJsaWMgbGFiZWw6IHN0cmluZyxcbiAgICBwdWJsaWMgcGFuZUlkOiBzdHJpbmcpIHt9XG4gIHRvVXNlYWJsZSh2YWw6IHVua25vd24pOiBUIHsgcmV0dXJuIHZhbCBhcyBUIH07XG4gIHRvU3RvcmVhYmxlKHZhbDogVCk6IGFueSB7IHJldHVybiB2YWwgYXMgYW55IH07XG59XG5cblxuZXhwb3J0IGNsYXNzIFNldHRpbmdNYW5hZ2VyIHtcbiAgcHJpdmF0ZSByZWdpc3RyeTogU2V0dGluZzxhbnk+W10gPSBbXTtcbiAgcHJpdmF0ZSBwYW5lczogUGFuZVtdID0gW107XG4gIHByaXZhdGUgZGF0YTogYW55IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgeWFtbDogWUFNTFN0b3JhZ2U7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHNldHRpbmdzUGF0aDogc3RyaW5nKSB7XG4gICAgdGhpcy55YW1sID0gbmV3IFlBTUxTdG9yYWdlKGZzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRWYWx1ZShpZDogc3RyaW5nKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgY29uc3Qgc2V0dGluZyA9IHRoaXMuZ2V0KGlkKTtcblxuICAgIGlmIChzZXR0aW5nKSB7XG4gICAgICBpZiAodGhpcy5kYXRhID09PSBudWxsKSB7XG4gICAgICAgIGxldCBzZXR0aW5nc0ZpbGVFeGlzdHM6IGJvb2xlYW47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0dGluZ3NGaWxlRXhpc3RzID0gKGF3YWl0IGZzLnN0YXQodGhpcy5zZXR0aW5nc1BhdGgpKS5pc0ZpbGUoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHNldHRpbmdzRmlsZUV4aXN0cyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5nc0ZpbGVFeGlzdHMpIHtcbiAgICAgICAgICB0aGlzLmRhdGEgPSAoYXdhaXQgdGhpcy55YW1sLmxvYWQodGhpcy5zZXR0aW5nc1BhdGgpKSB8fCB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcmF3VmFsID0gdGhpcy5kYXRhW2lkXTtcbiAgICAgIHJldHVybiByYXdWYWwgIT09IHVuZGVmaW5lZCA/IHNldHRpbmcudG9Vc2VhYmxlKHJhd1ZhbCkgOiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2V0dGluZyB0byBnZXQgdmFsdWUgZm9yIGlzIG5vdCBmb3VuZDogJHtpZH1gKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0VmFsdWUoaWQ6IHN0cmluZywgdmFsOiB1bmtub3duKSB7XG4gICAgY29uc3Qgc2V0dGluZyA9IHRoaXMuZ2V0KGlkKTtcbiAgICBpZiAoc2V0dGluZykge1xuICAgICAgY29uc3Qgc3RvcmVhYmxlID0gc2V0dGluZy50b1N0b3JlYWJsZSh2YWwpO1xuICAgICAgdGhpcy5kYXRhW2lkXSA9IHN0b3JlYWJsZTtcbiAgICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2V0dGluZyB0byBzZXQgdmFsdWUgZm9yIGlzIG5vdCBmb3VuZDogJHtpZH1gKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlVmFsdWUoaWQ6IHN0cmluZykge1xuICAgIGRlbGV0ZSB0aGlzLmRhdGFbaWRdO1xuICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvbW1pdCgpIHtcbiAgICBhd2FpdCBmcy5yZW1vdmUodGhpcy5zZXR0aW5nc1BhdGgpO1xuICAgIGF3YWl0IHRoaXMueWFtbC5zdG9yZSh0aGlzLnNldHRpbmdzUGF0aCwgdGhpcy5kYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0KGlkOiBzdHJpbmcpOiBTZXR0aW5nPGFueT4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmZpbmQocyA9PiBzLmlkID09PSBpZCk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXIoc2V0dGluZzogU2V0dGluZzxhbnk+KSB7XG4gICAgaWYgKHRoaXMucGFuZXMuZmluZChwID0+IHAuaWQgPT09IHNldHRpbmcucGFuZUlkKSkge1xuICAgICAgdGhpcy5yZWdpc3RyeS5wdXNoKHNldHRpbmcpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFuZSBJRFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY29uZmlndXJlUGFuZShwYW5lOiBQYW5lKSB7XG4gICAgdGhpcy5wYW5lcy5wdXNoKHBhbmUpO1xuICB9XG5cbiAgcHVibGljIHNldFVwQVBJRW5kcG9pbnRzKCkge1xuICAgIGlwY01haW4ub24oJ3NldC1zZXR0aW5nJywgKGV2dDogYW55LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlKG5hbWUsIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIGlwY01haW4ub24oJ2dldC1zZXR0aW5nJywgKGV2dDogYW55LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZShuYW1lKTtcbiAgICAgIGV2dC5yZXBseSh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBpcGNNYWluLm9uKCdjbGVhci1zZXR0aW5nJywgYXN5bmMgKGV2dDogYW55LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlVmFsdWUobmFtZSk7XG4gICAgICBldnQucmVwbHkoJ29rJyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==