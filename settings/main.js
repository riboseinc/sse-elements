import * as fs from 'fs-extra';
import * as log from 'electron-log';
import { ipcMain } from 'electron';
import { YAMLStorage } from '../storage/main/yaml';
export class Setting {
    constructor(id, label, paneId) {
        this.id = id;
        this.label = label;
        this.paneId = paneId;
    }
    toUseable(val) { return val; }
    ;
    toStoreable(val) { return val; }
    ;
}
export class SettingManager {
    constructor(settingsPath) {
        this.settingsPath = settingsPath;
        this.registry = [];
        this.panes = [];
        this.data = null;
        log.debug(`SSE: Settings: Configuring settings with path ${settingsPath}`);
        this.yaml = new YAMLStorage(fs);
    }
    async getValue(id) {
        const setting = this.get(id);
        if (setting) {
            if (this.data === null) {
                let settingsFileExists;
                try {
                    settingsFileExists = (await fs.stat(this.settingsPath)).isFile();
                }
                catch (e) {
                    settingsFileExists = false;
                }
                if (settingsFileExists) {
                    this.data = (await this.yaml.load(this.settingsPath)) || {};
                }
                else {
                    this.data = {};
                }
            }
            const rawVal = this.data[id];
            return rawVal !== undefined ? setting.toUseable(rawVal) : undefined;
        }
        else {
            log.warn(`SSE: Settings: Attempted to get value for non-existent setting ${id}`);
            throw new Error(`Setting to get value for is not found: ${id}`);
        }
    }
    async setValue(id, val) {
        // DANGER: Never log settingâ€™s val in raw form
        log.debug(`SSE: Settings: Set value for setting ${id}`);
        const setting = this.get(id);
        if (setting) {
            const storeable = setting.toStoreable(val);
            this.data[id] = storeable;
            await this.commit();
        }
        else {
            throw new Error(`Setting to set value for is not found: ${id}`);
        }
    }
    async deleteValue(id) {
        log.debug(`SSE: Settings: Delete setting: ${id}`);
        delete this.data[id];
        await this.commit();
    }
    async commit() {
        log.info("SSE: Settings: Commit new settings");
        log.debug("SSE: Settings: Commit: Remove file");
        await fs.remove(this.settingsPath);
        log.debug("SSE: Settings: Commit: Write new file");
        await this.yaml.store(this.settingsPath, this.data);
    }
    get(id) {
        return this.registry.find(s => s.id === id);
    }
    register(setting) {
        log.debug("SSE: Settings: Register setting");
        if (this.panes.find(p => p.id === setting.paneId)) {
            this.registry.push(setting);
        }
        else {
            throw new Error("Invalid pane ID");
        }
    }
    configurePane(pane) {
        this.panes.push(pane);
    }
    setUpAPIEndpoints() {
        log.verbose("SSE: Settings: Configure API endpoints");
        ipcMain.on('set-setting', (evt, name, value) => {
            return this.setValue(name, value);
        });
        ipcMain.on('get-setting', (evt, name) => {
            const value = this.getValue(name);
            evt.reply(value);
        });
        ipcMain.on('clear-setting', async (evt, name) => {
            log.debug(`SSE: Settings: received clear-setting request for ${name}`);
            await this.deleteValue(name);
            evt.reply('ok');
        });
    }
}
//# sourceMappingURL=data:application/json;base64,