import * as fs from 'fs-extra';
import * as path from 'path';
import { app, ipcMain } from 'electron';
import { YAMLStorage } from 'storage/main/yaml';
const WORK_DIR = path.join(app.getPath('userData'));
const SETTINGS_PATH = path.join(WORK_DIR, 'itu-ob-settings.yaml');
export class Setting {
    constructor(id, label, paneId) {
        this.id = id;
        this.label = label;
        this.paneId = paneId;
    }
    toUseable(val) { return val; }
    ;
    toStoreable(val) { return val; }
    ;
}
class SettingManager {
    constructor(yaml) {
        this.yaml = yaml;
        this.registry = [];
        this.panes = [];
        this.data = null;
    }
    async getValue(id) {
        const setting = this.get(id);
        if (setting) {
            if (this.data === null) {
                let settingsFileExists;
                try {
                    settingsFileExists = (await fs.stat(SETTINGS_PATH)).isFile();
                }
                catch (e) {
                    settingsFileExists = false;
                }
                if (settingsFileExists) {
                    this.data = (await this.yaml.load(SETTINGS_PATH)) || {};
                }
                else {
                    this.data = {};
                }
            }
            const rawVal = this.data[id];
            return rawVal !== undefined ? setting.toUseable(rawVal) : undefined;
        }
        else {
            throw new Error(`Setting to get value for is not found: ${id}`);
        }
    }
    async setValue(id, val) {
        const setting = this.get(id);
        if (setting) {
            const storeable = setting.toStoreable(val);
            this.data[id] = storeable;
            await this.commit();
        }
        else {
            throw new Error(`Setting to set value for is not found: ${id}`);
        }
    }
    async deleteValue(id) {
        delete this.data[id];
        await this.commit();
    }
    async commit() {
        await fs.remove(SETTINGS_PATH);
        await this.yaml.store(SETTINGS_PATH, this.data);
    }
    get(id) {
        return this.registry.find(s => s.id === id);
    }
    register(setting) {
        if (this.panes.find(p => p.id === setting.paneId)) {
            this.registry.push(setting);
        }
        else {
            throw new Error("Invalid pane ID");
        }
    }
    configurePane(pane) {
        this.panes.push(pane);
    }
    setUpAPIEndpoints() {
        ipcMain.on('set-setting', (evt, name, value) => {
            return this.setValue(name, value);
        });
        ipcMain.on('get-setting', (evt, name) => {
            const value = this.getValue(name);
            evt.reply(value);
        });
        ipcMain.on('clear-setting', async (evt, name) => {
            await this.deleteValue(name);
            evt.reply('ok');
        });
    }
}
export const manager = new SettingManager(new YAMLStorage(fs));
//# sourceMappingURL=data:application/json;base64,