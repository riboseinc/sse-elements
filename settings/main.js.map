{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/settings/main.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { app, ipcMain } from 'electron';\n\nimport { YAMLStorage } from 'sse/storage/main/yaml';\n\n\nconst WORK_DIR = path.join(app.getPath('userData'));\nconst SETTINGS_PATH = path.join(WORK_DIR, 'itu-ob-settings.yaml');\n\n\nexport interface Pane {\n  id: string;\n  label: string;\n  icon?: string;\n}\n\n\nexport class Setting<T> {\n  constructor(\n    public id: string,\n    public label: string,\n    public paneId: string) {}\n  toUseable(val: unknown): T { return val as T };\n  toStoreable(val: T): any { return val as any };\n}\n\n\nclass SettingManager {\n  private registry: Setting<any>[] = [];\n  private panes: Pane[] = [];\n  private data: any | null = null;\n\n  constructor(private yaml: YAMLStorage) {}\n\n  public async getValue(id: string): Promise<unknown> {\n    const setting = this.get(id);\n\n    if (setting) {\n      if (this.data === null) {\n        let settingsFileExists: boolean;\n        try {\n          settingsFileExists = (await fs.stat(SETTINGS_PATH)).isFile();\n        } catch (e) {\n          settingsFileExists = false;\n        }\n        if (settingsFileExists) {\n          this.data = (await this.yaml.load(SETTINGS_PATH)) || {};\n        } else {\n          this.data = {};\n        }\n      }\n      const rawVal = this.data[id];\n      return rawVal !== undefined ? setting.toUseable(rawVal) : undefined;\n    } else {\n      throw new Error(`Setting to get value for is not found: ${id}`);\n    }\n  }\n\n  public async setValue(id: string, val: unknown) {\n    const setting = this.get(id);\n    if (setting) {\n      const storeable = setting.toStoreable(val);\n      this.data[id] = storeable;\n      await this.commit();\n    } else {\n      throw new Error(`Setting to set value for is not found: ${id}`);\n    }\n  }\n\n  public async deleteValue(id: string) {\n    delete this.data[id];\n    await this.commit();\n  }\n\n  private async commit() {\n    await fs.remove(SETTINGS_PATH);\n    await this.yaml.store(SETTINGS_PATH, this.data);\n  }\n\n  private get(id: string): Setting<any> | undefined {\n    return this.registry.find(s => s.id === id);\n  }\n\n  public register(setting: Setting<any>) {\n    if (this.panes.find(p => p.id === setting.paneId)) {\n      this.registry.push(setting);\n\n    } else {\n      throw new Error(\"Invalid pane ID\");\n    }\n  }\n\n  public configurePane(pane: Pane) {\n    this.panes.push(pane);\n  }\n\n  public setUpAPIEndpoints() {\n    ipcMain.on('set-setting', (evt: any, name: string, value: any) => {\n      return this.setValue(name, value);\n    });\n\n    ipcMain.on('get-setting', (evt: any, name: string) => {\n      const value = this.getValue(name);\n      evt.reply(value);\n    });\n\n    ipcMain.on('clear-setting', async (evt: any, name: string) => {\n      await this.deleteValue(name);\n      evt.reply('ok');\n    });\n  }\n}\n\n\nexport const manager = new SettingManager(new YAMLStorage(fs));\n"]}