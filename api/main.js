import { ipcMain } from 'electron';
import { openWindow } from 'main/window';
import { reviveJsonValue } from './utils';
export function makeEndpoint(name, fetcher, saver) {
    ipcMain.on(`request-workspace-${name}`, async (evt, params, newObj) => {
        // TODO: Electron should be handling JSON [de]serialization for us, refactor!
        const parsedParams = JSON.parse(params || '{}', reviveJsonValue);
        let result;
        if (saver && newObj) {
            await saver(JSON.parse(newObj, reviveJsonValue));
        }
        if (fetcher) {
            result = await fetcher(parsedParams);
        }
        else {
            result = { success: true };
        }
        evt.reply(`workspace-${name}`, JSON.stringify(result));
    });
}
export function makeWriteOnlyEndpoint(name, dataSaver) {
    ipcMain.on(`store-workspace-${name}`, (evt, ...args) => {
        const parsedArgs = args.map(val => JSON.parse(val, reviveJsonValue));
        dataSaver(...parsedArgs);
    });
}
export function makeWindowEndpoint(name, getWindowOpts) {
    ipcMain.on(`open-${name}`, async (evt, ...args) => {
        await openWindow(getWindowOpts(...args));
        const result = JSON.stringify({ errors: [] });
        evt.returnValue = result;
        evt.reply(`open-${name}-done`, result);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQU0xQyxNQUFNLFVBQVUsWUFBWSxDQUFJLElBQVksRUFBRSxPQUFtQixFQUFFLEtBQWdEO0lBQ2pILE9BQU8sQ0FBQyxFQUFFLENBQUMscUJBQXFCLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFRLEVBQUUsTUFBZSxFQUFFLE1BQWUsRUFBRSxFQUFFO1FBQzNGLDZFQUE2RTtRQUM3RSxNQUFNLFlBQVksR0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdEUsSUFBSSxNQUFXLENBQUM7UUFFaEIsSUFBSSxLQUFLLElBQUksTUFBTSxFQUFFO1lBQ25CLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLE9BQU8sRUFBRTtZQUNYLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0wsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQzVCO1FBRUQsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFHRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsSUFBWSxFQUFFLFNBQW1DO0lBQ3JGLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLElBQUksRUFBRSxFQUFFLENBQUMsR0FBUSxFQUFFLEdBQUcsSUFBYyxFQUFFLEVBQUU7UUFDcEUsTUFBTSxVQUFVLEdBQVUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDNUUsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBR0QsTUFBTSxVQUFVLGtCQUFrQixDQUFDLElBQVksRUFBRSxhQUF5QztJQUN4RixPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQVEsRUFBRSxHQUFHLElBQWMsRUFBRSxFQUFFO1FBQy9ELE1BQU0sVUFBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpcGNNYWluIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgb3BlbldpbmRvdyB9IGZyb20gJ21haW4vd2luZG93JztcblxuaW1wb3J0IHsgcmV2aXZlSnNvblZhbHVlIH0gZnJvbSAnLi91dGlscyc7XG5cblxudHlwZSBTYXZlcjxJPiA9IChpbnB1dDogSSkgPT4gUHJvbWlzZTx2b2lkPjtcbnR5cGUgRmV0Y2hlcjxPPiA9IChwYXJhbXM6IGFueSkgPT4gUHJvbWlzZTxPPjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFbmRwb2ludDxUPihuYW1lOiBzdHJpbmcsIGZldGNoZXI6IEZldGNoZXI8VD4sIHNhdmVyPzogU2F2ZXI8eyBuZXdEYXRhOiBULCBub3RpZnk/OiBzdHJpbmdbXSB9Pikge1xuICBpcGNNYWluLm9uKGByZXF1ZXN0LXdvcmtzcGFjZS0ke25hbWV9YCwgYXN5bmMgKGV2dDogYW55LCBwYXJhbXM/OiBzdHJpbmcsIG5ld09iaj86IHN0cmluZykgPT4ge1xuICAgIC8vIFRPRE86IEVsZWN0cm9uIHNob3VsZCBiZSBoYW5kbGluZyBKU09OIFtkZV1zZXJpYWxpemF0aW9uIGZvciB1cywgcmVmYWN0b3IhXG4gICAgY29uc3QgcGFyc2VkUGFyYW1zOiBhbnkgPSBKU09OLnBhcnNlKHBhcmFtcyB8fCAne30nLCByZXZpdmVKc29uVmFsdWUpO1xuICAgIGxldCByZXN1bHQ6IGFueTtcblxuICAgIGlmIChzYXZlciAmJiBuZXdPYmopIHtcbiAgICAgIGF3YWl0IHNhdmVyKEpTT04ucGFyc2UobmV3T2JqLCByZXZpdmVKc29uVmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hlcikge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgZmV0Y2hlcihwYXJzZWRQYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9XG5cbiAgICBldnQucmVwbHkoYHdvcmtzcGFjZS0ke25hbWV9YCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlV3JpdGVPbmx5RW5kcG9pbnQobmFtZTogc3RyaW5nLCBkYXRhU2F2ZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQge1xuICBpcGNNYWluLm9uKGBzdG9yZS13b3Jrc3BhY2UtJHtuYW1lfWAsIChldnQ6IGFueSwgLi4uYXJnczogc3RyaW5nW10pID0+IHtcbiAgICBjb25zdCBwYXJzZWRBcmdzOiBhbnlbXSA9IGFyZ3MubWFwKHZhbCA9PiBKU09OLnBhcnNlKHZhbCwgcmV2aXZlSnNvblZhbHVlKSk7XG4gICAgZGF0YVNhdmVyKC4uLnBhcnNlZEFyZ3MpO1xuICB9KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVdpbmRvd0VuZHBvaW50KG5hbWU6IHN0cmluZywgZ2V0V2luZG93T3B0czogKC4uLmFyZ3M6IHN0cmluZ1tdKSA9PiBhbnkpOiB2b2lkIHtcbiAgaXBjTWFpbi5vbihgb3Blbi0ke25hbWV9YCwgYXN5bmMgKGV2dDogYW55LCAuLi5hcmdzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGF3YWl0IG9wZW5XaW5kb3coZ2V0V2luZG93T3B0cyguLi5hcmdzKSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBKU09OLnN0cmluZ2lmeSh7IGVycm9yczogW10gfSk7XG4gICAgZXZ0LnJldHVyblZhbHVlID0gcmVzdWx0O1xuICAgIGV2dC5yZXBseShgb3Blbi0ke25hbWV9LWRvbmVgLCByZXN1bHQpO1xuICB9KTtcbn1cbiJdfQ==