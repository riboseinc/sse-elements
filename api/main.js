import { ipcMain } from 'electron';
import { openWindow } from '../main/window';
import { reviveJsonValue } from './utils';
export function makeEndpoint(name, fetcher, saver) {
    ipcMain.on(`request-workspace-${name}`, async (evt, params, newObj) => {
        // TODO: Electron should be handling JSON [de]serialization for us, refactor!
        const parsedParams = JSON.parse(params || '{}', reviveJsonValue);
        let result;
        if (saver && newObj) {
            await saver(JSON.parse(newObj, reviveJsonValue));
        }
        if (fetcher) {
            result = await fetcher(parsedParams);
        }
        else {
            result = { success: true };
        }
        evt.reply(`workspace-${name}`, JSON.stringify(result));
    });
}
export function makeWriteOnlyEndpoint(name, dataSaver) {
    ipcMain.on(`store-workspace-${name}`, (evt, ...args) => {
        const parsedArgs = args.map(val => JSON.parse(val, reviveJsonValue));
        dataSaver(...parsedArgs);
    });
}
export function makeWindowEndpoint(name, getWindowOpts) {
    ipcMain.on(`open-${name}`, async (evt, ...args) => {
        await openWindow(getWindowOpts(...args));
        const result = JSON.stringify({ errors: [] });
        evt.returnValue = result;
        evt.reply(`open-${name}-done`, result);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTTFDLE1BQU0sVUFBVSxZQUFZLENBQUksSUFBWSxFQUFFLE9BQW1CLEVBQUUsS0FBZ0Q7SUFDakgsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQVEsRUFBRSxNQUFlLEVBQUUsTUFBZSxFQUFFLEVBQUU7UUFDM0YsNkVBQTZFO1FBQzdFLE1BQU0sWUFBWSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN0RSxJQUFJLE1BQVcsQ0FBQztRQUVoQixJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDbkIsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3RDO2FBQU07WUFDTCxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDNUI7UUFFRCxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUdELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsU0FBbUM7SUFDckYsT0FBTyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFRLEVBQUUsR0FBRyxJQUFjLEVBQUUsRUFBRTtRQUNwRSxNQUFNLFVBQVUsR0FBVSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUM1RSxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFHRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsSUFBWSxFQUFFLGFBQXlDO0lBQ3hGLE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBUSxFQUFFLEdBQUcsSUFBYyxFQUFFLEVBQUU7UUFDL0QsTUFBTSxVQUFVLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUV6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlwY01haW4gfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyBvcGVuV2luZG93IH0gZnJvbSAnLi4vbWFpbi93aW5kb3cnO1xuXG5pbXBvcnQgeyByZXZpdmVKc29uVmFsdWUgfSBmcm9tICcuL3V0aWxzJztcblxuXG50eXBlIFNhdmVyPEk+ID0gKGlucHV0OiBJKSA9PiBQcm9taXNlPHZvaWQ+O1xudHlwZSBGZXRjaGVyPE8+ID0gKHBhcmFtczogYW55KSA9PiBQcm9taXNlPE8+O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVuZHBvaW50PFQ+KG5hbWU6IHN0cmluZywgZmV0Y2hlcjogRmV0Y2hlcjxUPiwgc2F2ZXI/OiBTYXZlcjx7IG5ld0RhdGE6IFQsIG5vdGlmeT86IHN0cmluZ1tdIH0+KSB7XG4gIGlwY01haW4ub24oYHJlcXVlc3Qtd29ya3NwYWNlLSR7bmFtZX1gLCBhc3luYyAoZXZ0OiBhbnksIHBhcmFtcz86IHN0cmluZywgbmV3T2JqPzogc3RyaW5nKSA9PiB7XG4gICAgLy8gVE9ETzogRWxlY3Ryb24gc2hvdWxkIGJlIGhhbmRsaW5nIEpTT04gW2RlXXNlcmlhbGl6YXRpb24gZm9yIHVzLCByZWZhY3RvciFcbiAgICBjb25zdCBwYXJzZWRQYXJhbXM6IGFueSA9IEpTT04ucGFyc2UocGFyYW1zIHx8ICd7fScsIHJldml2ZUpzb25WYWx1ZSk7XG4gICAgbGV0IHJlc3VsdDogYW55O1xuXG4gICAgaWYgKHNhdmVyICYmIG5ld09iaikge1xuICAgICAgYXdhaXQgc2F2ZXIoSlNPTi5wYXJzZShuZXdPYmosIHJldml2ZUpzb25WYWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaGVyKSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBmZXRjaGVyKHBhcnNlZFBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH1cblxuICAgIGV2dC5yZXBseShgd29ya3NwYWNlLSR7bmFtZX1gLCBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VXcml0ZU9ubHlFbmRwb2ludChuYW1lOiBzdHJpbmcsIGRhdGFTYXZlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZCB7XG4gIGlwY01haW4ub24oYHN0b3JlLXdvcmtzcGFjZS0ke25hbWV9YCwgKGV2dDogYW55LCAuLi5hcmdzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZEFyZ3M6IGFueVtdID0gYXJncy5tYXAodmFsID0+IEpTT04ucGFyc2UodmFsLCByZXZpdmVKc29uVmFsdWUpKTtcbiAgICBkYXRhU2F2ZXIoLi4ucGFyc2VkQXJncyk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlV2luZG93RW5kcG9pbnQobmFtZTogc3RyaW5nLCBnZXRXaW5kb3dPcHRzOiAoLi4uYXJnczogc3RyaW5nW10pID0+IGFueSk6IHZvaWQge1xuICBpcGNNYWluLm9uKGBvcGVuLSR7bmFtZX1gLCBhc3luYyAoZXZ0OiBhbnksIC4uLmFyZ3M6IHN0cmluZ1tdKSA9PiB7XG4gICAgYXdhaXQgb3BlbldpbmRvdyhnZXRXaW5kb3dPcHRzKC4uLmFyZ3MpKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHsgZXJyb3JzOiBbXSB9KTtcbiAgICBldnQucmV0dXJuVmFsdWUgPSByZXN1bHQ7XG4gICAgZXZ0LnJlcGx5KGBvcGVuLSR7bmFtZX0tZG9uZWAsIHJlc3VsdCk7XG4gIH0pO1xufVxuIl19