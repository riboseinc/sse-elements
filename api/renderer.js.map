{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/api/renderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ipcRenderer } from 'electron';\nimport { useTimeTravel, TimeTravel } from 'sse/time-travel/renderer';\n\nimport { reviveJsonValue } from './utils';\n\n\n// TODO (#4): Refactor into generic main APIs, rather than Workspace-centered\n\n\n// TODO: Handle JSON stringification of arguments?\nexport async function apiRequest<T>(request: string, ...args: string[]): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    function handleResp(evt: any, rawData: string) {\n      ipcRenderer.removeListener(`workspace-${request}`, handleResp);\n      const data: T = JSON.parse(rawData, reviveJsonValue);\n      resolve(data);\n    }\n    ipcRenderer.on(`workspace-${request}`, handleResp);\n    ipcRenderer.send(`request-workspace-${request}`, ...args);\n  });\n}\n\n\n/* TODO: Implement hook for using time travel APIs with undo/redo  */\n\n\n/* React hooks */\n\nexport function useWorkspace<T>(request: string, reducer: any, initData: T, ...args: any[]) {\n  function storeData(data: any) {\n    ipcRenderer.send(`store-workspace-${request}`, ...serializedArgs, JSON.stringify(data));\n  }\n\n  const serializedArgs = args.map(val => JSON.stringify(val));\n  const tt: TimeTravel = useTimeTravel(storeData, reducer, initData);\n\n  useEffect(() => {\n\n    // useEffect, at least per TS bindings, doesn’t allow async callbacks,\n    // so let’s wrap this in a function\n    (async () => tt.dispatch({\n      type: 'FETCH_DATA',\n      data: await apiRequest<T>(request, ...serializedArgs),\n    }))();\n\n    return undefined;\n  }, [request, JSON.stringify(tt.timeline.present)]);\n\n  return tt;\n}\n\n\nexport function useWorkspaceRO<T>(request: string, initData: T, poll: boolean = false) {\n  const [data, updateData] = useState(initData);\n\n  useEffect(() => {\n    function handleNewData(evt: any, rawData: string) {\n      ipcRenderer.removeListener(`workspace-${request}`, handleNewData);\n      const data: T = JSON.parse(rawData, reviveJsonValue);\n      updateData(data);\n    }\n\n    function getData() {\n      ipcRenderer.on(`workspace-${request}`, handleNewData);\n      ipcRenderer.send(`request-workspace-${request}`);\n    }\n\n    if (poll === true) {\n      getData();\n      const interval = setInterval(getData, 5000);\n      return function cleanup() {\n        clearInterval(interval);\n      };\n    } else {\n      getData();\n      return undefined;\n    }\n  }, [request]);\n\n  return data;\n}\n"]}