import { useState, useEffect } from 'react';
import { ipcRenderer } from 'electron';
import { useTimeTravel } from '../time-travel/renderer';
import { reviveJsonValue } from './utils';
// TODO (#4): Refactor into generic main APIs, rather than Workspace-centered
// TODO: Handle JSON stringification of arguments?
export async function apiRequest(request, ...args) {
    return new Promise((resolve, reject) => {
        function handleResp(evt, rawData) {
            ipcRenderer.removeListener(`workspace-${request}`, handleResp);
            const data = JSON.parse(rawData, reviveJsonValue);
            resolve(data);
        }
        ipcRenderer.on(`workspace-${request}`, handleResp);
        ipcRenderer.send(`request-workspace-${request}`, ...args);
    });
}
/* TODO: Implement hook for using time travel APIs with undo/redo  */
/* React hooks */
export function useWorkspace(request, reducer, initData, ...args) {
    function storeData(data) {
        ipcRenderer.send(`store-workspace-${request}`, ...serializedArgs, JSON.stringify(data));
    }
    const serializedArgs = args.map(val => JSON.stringify(val));
    const tt = useTimeTravel(storeData, reducer, initData);
    useEffect(() => {
        // useEffect, at least per TS bindings, doesn’t allow async callbacks,
        // so let’s wrap this in a function
        (async () => tt.dispatch({
            type: 'FETCH_DATA',
            data: await apiRequest(request, ...serializedArgs),
        }))();
        return undefined;
    }, [request, JSON.stringify(tt.timeline.present)]);
    return tt;
}
export function useWorkspaceRO(request, initData, poll = false) {
    const [data, updateData] = useState(initData);
    useEffect(() => {
        function handleNewData(evt, rawData) {
            ipcRenderer.removeListener(`workspace-${request}`, handleNewData);
            const data = JSON.parse(rawData, reviveJsonValue);
            updateData(data);
        }
        function getData() {
            ipcRenderer.on(`workspace-${request}`, handleNewData);
            ipcRenderer.send(`request-workspace-${request}`);
        }
        if (poll === true) {
            getData();
            const interval = setInterval(getData, 5000);
            return function cleanup() {
                clearInterval(interval);
            };
        }
        else {
            getData();
            return undefined;
        }
    }, [request]);
    return data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL3JlbmRlcmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQWMsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRzFDLDZFQUE2RTtBQUc3RSxrREFBa0Q7QUFDbEQsTUFBTSxDQUFDLEtBQUssVUFBVSxVQUFVLENBQUksT0FBZSxFQUFFLEdBQUcsSUFBYztJQUNwRSxPQUFPLElBQUksT0FBTyxDQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3hDLFNBQVMsVUFBVSxDQUFDLEdBQVEsRUFBRSxPQUFlO1lBQzNDLFdBQVcsQ0FBQyxjQUFjLENBQUMsYUFBYSxPQUFPLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMvRCxNQUFNLElBQUksR0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztZQUNyRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEIsQ0FBQztRQUNELFdBQVcsQ0FBQyxFQUFFLENBQUMsYUFBYSxPQUFPLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuRCxXQUFXLENBQUMsSUFBSSxDQUFDLHFCQUFxQixPQUFPLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUdELHFFQUFxRTtBQUdyRSxpQkFBaUI7QUFFakIsTUFBTSxVQUFVLFlBQVksQ0FBSSxPQUFlLEVBQUUsT0FBWSxFQUFFLFFBQVcsRUFBRSxHQUFHLElBQVc7SUFDeEYsU0FBUyxTQUFTLENBQUMsSUFBUztRQUMxQixXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixPQUFPLEVBQUUsRUFBRSxHQUFHLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxFQUFFLEdBQWUsYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbkUsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUViLHNFQUFzRTtRQUN0RSxtQ0FBbUM7UUFDbkMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDdkIsSUFBSSxFQUFFLFlBQVk7WUFDbEIsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFJLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQztTQUN0RCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRU4sT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkQsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBR0QsTUFBTSxVQUFVLGNBQWMsQ0FBSSxPQUFlLEVBQUUsUUFBVyxFQUFFLE9BQWdCLEtBQUs7SUFDbkYsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFOUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLFNBQVMsYUFBYSxDQUFDLEdBQVEsRUFBRSxPQUFlO1lBQzlDLFdBQVcsQ0FBQyxjQUFjLENBQUMsYUFBYSxPQUFPLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNsRSxNQUFNLElBQUksR0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztZQUNyRCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsQ0FBQztRQUVELFNBQVMsT0FBTztZQUNkLFdBQVcsQ0FBQyxFQUFFLENBQUMsYUFBYSxPQUFPLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUN0RCxXQUFXLENBQUMsSUFBSSxDQUFDLHFCQUFxQixPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFFRCxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVDLE9BQU8sU0FBUyxPQUFPO2dCQUNyQixhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUIsQ0FBQyxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDO1lBQ1YsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRWQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlwY1JlbmRlcmVyIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHsgdXNlVGltZVRyYXZlbCwgVGltZVRyYXZlbCB9IGZyb20gJy4uL3RpbWUtdHJhdmVsL3JlbmRlcmVyJztcblxuaW1wb3J0IHsgcmV2aXZlSnNvblZhbHVlIH0gZnJvbSAnLi91dGlscyc7XG5cblxuLy8gVE9ETyAoIzQpOiBSZWZhY3RvciBpbnRvIGdlbmVyaWMgbWFpbiBBUElzLCByYXRoZXIgdGhhbiBXb3Jrc3BhY2UtY2VudGVyZWRcblxuXG4vLyBUT0RPOiBIYW5kbGUgSlNPTiBzdHJpbmdpZmljYXRpb24gb2YgYXJndW1lbnRzP1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwaVJlcXVlc3Q8VD4ocmVxdWVzdDogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8VD4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3AoZXZ0OiBhbnksIHJhd0RhdGE6IHN0cmluZykge1xuICAgICAgaXBjUmVuZGVyZXIucmVtb3ZlTGlzdGVuZXIoYHdvcmtzcGFjZS0ke3JlcXVlc3R9YCwgaGFuZGxlUmVzcCk7XG4gICAgICBjb25zdCBkYXRhOiBUID0gSlNPTi5wYXJzZShyYXdEYXRhLCByZXZpdmVKc29uVmFsdWUpO1xuICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgaXBjUmVuZGVyZXIub24oYHdvcmtzcGFjZS0ke3JlcXVlc3R9YCwgaGFuZGxlUmVzcCk7XG4gICAgaXBjUmVuZGVyZXIuc2VuZChgcmVxdWVzdC13b3Jrc3BhY2UtJHtyZXF1ZXN0fWAsIC4uLmFyZ3MpO1xuICB9KTtcbn1cblxuXG4vKiBUT0RPOiBJbXBsZW1lbnQgaG9vayBmb3IgdXNpbmcgdGltZSB0cmF2ZWwgQVBJcyB3aXRoIHVuZG8vcmVkbyAgKi9cblxuXG4vKiBSZWFjdCBob29rcyAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlV29ya3NwYWNlPFQ+KHJlcXVlc3Q6IHN0cmluZywgcmVkdWNlcjogYW55LCBpbml0RGF0YTogVCwgLi4uYXJnczogYW55W10pIHtcbiAgZnVuY3Rpb24gc3RvcmVEYXRhKGRhdGE6IGFueSkge1xuICAgIGlwY1JlbmRlcmVyLnNlbmQoYHN0b3JlLXdvcmtzcGFjZS0ke3JlcXVlc3R9YCwgLi4uc2VyaWFsaXplZEFyZ3MsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgfVxuXG4gIGNvbnN0IHNlcmlhbGl6ZWRBcmdzID0gYXJncy5tYXAodmFsID0+IEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuICBjb25zdCB0dDogVGltZVRyYXZlbCA9IHVzZVRpbWVUcmF2ZWwoc3RvcmVEYXRhLCByZWR1Y2VyLCBpbml0RGF0YSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgIC8vIHVzZUVmZmVjdCwgYXQgbGVhc3QgcGVyIFRTIGJpbmRpbmdzLCBkb2VzbuKAmXQgYWxsb3cgYXN5bmMgY2FsbGJhY2tzLFxuICAgIC8vIHNvIGxldOKAmXMgd3JhcCB0aGlzIGluIGEgZnVuY3Rpb25cbiAgICAoYXN5bmMgKCkgPT4gdHQuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ0ZFVENIX0RBVEEnLFxuICAgICAgZGF0YTogYXdhaXQgYXBpUmVxdWVzdDxUPihyZXF1ZXN0LCAuLi5zZXJpYWxpemVkQXJncyksXG4gICAgfSkpKCk7XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVxdWVzdCwgSlNPTi5zdHJpbmdpZnkodHQudGltZWxpbmUucHJlc2VudCldKTtcblxuICByZXR1cm4gdHQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVdvcmtzcGFjZVJPPFQ+KHJlcXVlc3Q6IHN0cmluZywgaW5pdERhdGE6IFQsIHBvbGw6IGJvb2xlYW4gPSBmYWxzZSkge1xuICBjb25zdCBbZGF0YSwgdXBkYXRlRGF0YV0gPSB1c2VTdGF0ZShpbml0RGF0YSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBoYW5kbGVOZXdEYXRhKGV2dDogYW55LCByYXdEYXRhOiBzdHJpbmcpIHtcbiAgICAgIGlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKGB3b3Jrc3BhY2UtJHtyZXF1ZXN0fWAsIGhhbmRsZU5ld0RhdGEpO1xuICAgICAgY29uc3QgZGF0YTogVCA9IEpTT04ucGFyc2UocmF3RGF0YSwgcmV2aXZlSnNvblZhbHVlKTtcbiAgICAgIHVwZGF0ZURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAgIGlwY1JlbmRlcmVyLm9uKGB3b3Jrc3BhY2UtJHtyZXF1ZXN0fWAsIGhhbmRsZU5ld0RhdGEpO1xuICAgICAgaXBjUmVuZGVyZXIuc2VuZChgcmVxdWVzdC13b3Jrc3BhY2UtJHtyZXF1ZXN0fWApO1xuICAgIH1cblxuICAgIGlmIChwb2xsID09PSB0cnVlKSB7XG4gICAgICBnZXREYXRhKCk7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGdldERhdGEsIDUwMDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0RGF0YSgpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtyZXF1ZXN0XSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iXX0=