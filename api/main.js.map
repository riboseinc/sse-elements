{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/api/main.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AACnC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAM1C,MAAM,UAAU,YAAY,CAAI,IAAY,EAAE,OAAmB,EAAE,KAAgD;IACjH,OAAO,CAAC,EAAE,CAAC,qBAAqB,IAAI,EAAE,EAAE,KAAK,EAAE,GAAQ,EAAE,MAAe,EAAE,MAAe,EAAE,EAAE;QAC3F,6EAA6E;QAC7E,MAAM,YAAY,GAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE,eAAe,CAAC,CAAC;QACtE,IAAI,MAAW,CAAC;QAEhB,IAAI,KAAK,IAAI,MAAM,EAAE;YACnB,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;SAClD;QAED,IAAI,OAAO,EAAE;YACX,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC;SACtC;aAAM;YACL,MAAM,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC5B;QAED,GAAG,CAAC,KAAK,CAAC,aAAa,IAAI,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,qBAAqB,CAAC,IAAY,EAAE,SAAmC;IACrF,OAAO,CAAC,EAAE,CAAC,mBAAmB,IAAI,EAAE,EAAE,CAAC,GAAQ,EAAE,GAAG,IAAc,EAAE,EAAE;QACpE,MAAM,UAAU,GAAU,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;QAC5E,SAAS,CAAC,GAAG,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,kBAAkB,CAAC,IAAY,EAAE,aAAyC;IACxF,OAAO,CAAC,EAAE,CAAC,QAAQ,IAAI,EAAE,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,IAAc,EAAE,EAAE;QAC/D,MAAM,UAAU,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QAEzC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QAC9C,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;QACzB,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,OAAO,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { ipcMain } from 'electron';\nimport { openWindow } from 'sse/main/window';\n\nimport { reviveJsonValue } from './utils';\n\n\ntype Saver<I> = (input: I) => Promise<void>;\ntype Fetcher<O> = (params: any) => Promise<O>;\n\nexport function makeEndpoint<T>(name: string, fetcher: Fetcher<T>, saver?: Saver<{ newData: T, notify?: string[] }>) {\n  ipcMain.on(`request-workspace-${name}`, async (evt: any, params?: string, newObj?: string) => {\n    // TODO: Electron should be handling JSON [de]serialization for us, refactor!\n    const parsedParams: any = JSON.parse(params || '{}', reviveJsonValue);\n    let result: any;\n\n    if (saver && newObj) {\n      await saver(JSON.parse(newObj, reviveJsonValue));\n    }\n\n    if (fetcher) {\n      result = await fetcher(parsedParams);\n    } else {\n      result = { success: true };\n    }\n\n    evt.reply(`workspace-${name}`, JSON.stringify(result));\n  });\n}\n\n\nexport function makeWriteOnlyEndpoint(name: string, dataSaver: (...args: any[]) => void): void {\n  ipcMain.on(`store-workspace-${name}`, (evt: any, ...args: string[]) => {\n    const parsedArgs: any[] = args.map(val => JSON.parse(val, reviveJsonValue));\n    dataSaver(...parsedArgs);\n  });\n}\n\n\nexport function makeWindowEndpoint(name: string, getWindowOpts: (...args: string[]) => any): void {\n  ipcMain.on(`open-${name}`, async (evt: any, ...args: string[]) => {\n    await openWindow(getWindowOpts(...args));\n\n    const result = JSON.stringify({ errors: [] });\n    evt.returnValue = result;\n    evt.reply(`open-${name}-done`, result);\n  });\n}\n"]}