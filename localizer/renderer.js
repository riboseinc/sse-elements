import React, { useContext } from 'react';
import { Icon } from '@blueprintjs/core';
import styles from './styles.scss';
export const LangConfigContext = React.createContext({
    available: { en: 'English', zh: 'Chinese', ru: 'Russian' },
    default: 'en',
    selected: 'en',
    select: (id) => { },
});
export const Trans = function ({ what }) {
    const lang = useContext(LangConfigContext);
    const translated = what[lang.selected];
    const untranslated = what[lang.default];
    // const translated = translatable[lang.selected.id];
    // if (!translated) {
    //   // Register missing translation
    // }
    return React.createElement("span", null, translated || untranslated || '(malformed translatable string)');
};
export const LangSelector = function ({ value }) {
    const cfg = useContext(LangConfigContext);
    return (React.createElement("p", { className: styles.langSelector }, Object.keys(cfg.available).map((langId) => React.createElement(LangSelectorButton, { id: langId, title: cfg.available[langId], isSelected: langId === cfg.selected, onSelect: () => cfg.select(langId), hasTranslation: (value !== undefined) ? (value[langId] === undefined) : undefined }))));
};
const LangSelectorButton = function (props) {
    return (React.createElement(React.Fragment, null,
        props.isSelected
            ? React.createElement("strong", { className: styles.lang }, props.id)
            : React.createElement("a", { className: styles.lang, title: `Select ${props.title}`, href: "javascript: void 0;", onClick: props.onSelect },
                React.createElement("span", null, props.id)),
        props.hasTranslation === false
            ? React.createElement(Icon, { icon: "error", intent: "danger", title: `Missing translation for ${props.title}`, htmlTitle: `Missing translation for ${props.title}` })
            : ''));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9jYWxpemVyL3JlbmRlcmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMxQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJekMsT0FBTyxNQUFNLE1BQU0sZUFBZSxDQUFDO0FBUW5DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxhQUFhLENBQXdCO0lBQzFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFO0lBQzFELE9BQU8sRUFBRSxJQUFJO0lBQ2IsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRSxHQUFFLENBQUM7Q0FDM0IsQ0FBQyxDQUFDO0FBSUgsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUF5QyxVQUFVLEVBQUUsSUFBSSxFQUFFO0lBQzNFLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV4QyxxREFBcUQ7SUFDckQscUJBQXFCO0lBQ3JCLG9DQUFvQztJQUNwQyxJQUFJO0lBRUosT0FBTyxrQ0FBTyxVQUFVLElBQUksWUFBWSxJQUFJLGlDQUFpQyxDQUFRLENBQUM7QUFDeEYsQ0FBQyxDQUFDO0FBTUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFnQyxVQUFVLEVBQUUsS0FBSyxFQUFFO0lBQzFFLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTFDLE9BQU8sQ0FDTCwyQkFBRyxTQUFTLEVBQUUsTUFBTSxDQUFDLFlBQVksSUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FDakQsb0JBQUMsa0JBQWtCLElBQ2pCLEVBQUUsRUFBRSxNQUFNLEVBQ1YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQzVCLFVBQVUsRUFBRSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsRUFDbkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ2xDLGNBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FDakYsQ0FDSCxDQUNDLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQztBQVVGLE1BQU0sa0JBQWtCLEdBQXNDLFVBQVUsS0FBSztJQUMzRSxPQUFPLENBQ0w7UUFFRyxLQUFLLENBQUMsVUFBVTtZQUNmLENBQUMsQ0FBQyxnQ0FBUSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksSUFDM0IsS0FBSyxDQUFDLEVBQUUsQ0FDRjtZQUNYLENBQUMsQ0FBQywyQkFDSSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksRUFDdEIsS0FBSyxFQUFFLFVBQVUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUM5QixJQUFJLEVBQUMscUJBQXFCLEVBQzFCLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDekIsa0NBQU8sS0FBSyxDQUFDLEVBQUUsQ0FBUSxDQUNyQjtRQUVQLEtBQUssQ0FBQyxjQUFjLEtBQUssS0FBSztZQUM3QixDQUFDLENBQUMsb0JBQUMsSUFBSSxJQUNILElBQUksRUFBQyxPQUFPLEVBQ1osTUFBTSxFQUFDLFFBQVEsRUFDZixLQUFLLEVBQUUsMkJBQTJCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFDL0MsU0FBUyxFQUFFLDJCQUEyQixLQUFLLENBQUMsS0FBSyxFQUFFLEdBQ25EO1lBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FFTCxDQUNKLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5cbmltcG9ydCB7IFN1cHBvcnRlZExhbmd1YWdlcywgTGFuZ0NvbmZpZywgVHJhbnNsYXRhYmxlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5cblxuaW50ZXJmYWNlIExhbmdDb25maWdDb250ZXh0U3BlYyBleHRlbmRzIExhbmdDb25maWcge1xuICBhdmFpbGFibGU6IFN1cHBvcnRlZExhbmd1YWdlcyxcbiAgc2VsZWN0KGlkOiBzdHJpbmcpOiB2b2lkLFxufVxuXG5leHBvcnQgY29uc3QgTGFuZ0NvbmZpZ0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PExhbmdDb25maWdDb250ZXh0U3BlYz4oe1xuICBhdmFpbGFibGU6IHsgZW46ICdFbmdsaXNoJywgemg6ICdDaGluZXNlJywgcnU6ICdSdXNzaWFuJyB9LFxuICBkZWZhdWx0OiAnZW4nLFxuICBzZWxlY3RlZDogJ2VuJyxcbiAgc2VsZWN0OiAoaWQ6IHN0cmluZykgPT4ge30sXG59KTtcblxuXG5pbnRlcmZhY2UgVHJhbnNsYXRhYmxlQ29tcG9uZW50UHJvcHMgeyB3aGF0OiBUcmFuc2xhdGFibGU8c3RyaW5nPiB9XG5leHBvcnQgY29uc3QgVHJhbnM6IFJlYWN0LkZDPFRyYW5zbGF0YWJsZUNvbXBvbmVudFByb3BzPiA9IGZ1bmN0aW9uICh7IHdoYXQgfSkge1xuICBjb25zdCBsYW5nID0gdXNlQ29udGV4dChMYW5nQ29uZmlnQ29udGV4dCk7XG4gIGNvbnN0IHRyYW5zbGF0ZWQgPSB3aGF0W2xhbmcuc2VsZWN0ZWRdO1xuICBjb25zdCB1bnRyYW5zbGF0ZWQgPSB3aGF0W2xhbmcuZGVmYXVsdF07XG5cbiAgLy8gY29uc3QgdHJhbnNsYXRlZCA9IHRyYW5zbGF0YWJsZVtsYW5nLnNlbGVjdGVkLmlkXTtcbiAgLy8gaWYgKCF0cmFuc2xhdGVkKSB7XG4gIC8vICAgLy8gUmVnaXN0ZXIgbWlzc2luZyB0cmFuc2xhdGlvblxuICAvLyB9XG5cbiAgcmV0dXJuIDxzcGFuPnt0cmFuc2xhdGVkIHx8IHVudHJhbnNsYXRlZCB8fCAnKG1hbGZvcm1lZCB0cmFuc2xhdGFibGUgc3RyaW5nKSd9PC9zcGFuPjtcbn07XG5cblxuaW50ZXJmYWNlIExhbmdTZWxlY3RvclByb3BzIHtcbiAgdmFsdWU/OiBUcmFuc2xhdGFibGU8YW55Pixcbn1cbmV4cG9ydCBjb25zdCBMYW5nU2VsZWN0b3I6IFJlYWN0LkZDPExhbmdTZWxlY3RvclByb3BzPiA9IGZ1bmN0aW9uICh7IHZhbHVlIH0pIHtcbiAgY29uc3QgY2ZnID0gdXNlQ29udGV4dChMYW5nQ29uZmlnQ29udGV4dCk7XG5cbiAgcmV0dXJuIChcbiAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5sYW5nU2VsZWN0b3J9PlxuICAgICAge09iamVjdC5rZXlzKGNmZy5hdmFpbGFibGUpLm1hcCgobGFuZ0lkOiBzdHJpbmcpID0+XG4gICAgICAgIDxMYW5nU2VsZWN0b3JCdXR0b25cbiAgICAgICAgICBpZD17bGFuZ0lkfVxuICAgICAgICAgIHRpdGxlPXtjZmcuYXZhaWxhYmxlW2xhbmdJZF19XG4gICAgICAgICAgaXNTZWxlY3RlZD17bGFuZ0lkID09PSBjZmcuc2VsZWN0ZWR9XG4gICAgICAgICAgb25TZWxlY3Q9eygpID0+IGNmZy5zZWxlY3QobGFuZ0lkKX1cbiAgICAgICAgICBoYXNUcmFuc2xhdGlvbj17KHZhbHVlICE9PSB1bmRlZmluZWQpID8gKHZhbHVlW2xhbmdJZF0gPT09IHVuZGVmaW5lZCkgOiB1bmRlZmluZWR9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvcD5cbiAgKTtcbn07XG5cblxuaW50ZXJmYWNlIExhbmdTZWxlY3RvckJ1dHRvblByb3BzIHtcbiAgaWQ6IHN0cmluZyxcbiAgdGl0bGU6IHN0cmluZyxcbiAgaXNTZWxlY3RlZDogYm9vbGVhbixcbiAgb25TZWxlY3Q6ICgpID0+IHZvaWQsXG4gIGhhc1RyYW5zbGF0aW9uOiBib29sZWFuIHwgdW5kZWZpbmVkLFxufVxuY29uc3QgTGFuZ1NlbGVjdG9yQnV0dG9uOiBSZWFjdC5GQzxMYW5nU2VsZWN0b3JCdXR0b25Qcm9wcz4gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuXG4gICAgICB7cHJvcHMuaXNTZWxlY3RlZFxuICAgICAgICA/IDxzdHJvbmcgY2xhc3NOYW1lPXtzdHlsZXMubGFuZ30+XG4gICAgICAgICAgICB7cHJvcHMuaWR9XG4gICAgICAgICAgPC9zdHJvbmc+XG4gICAgICAgIDogPGFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMubGFuZ31cbiAgICAgICAgICAgICAgdGl0bGU9e2BTZWxlY3QgJHtwcm9wcy50aXRsZX1gfVxuICAgICAgICAgICAgICBocmVmPVwiamF2YXNjcmlwdDogdm9pZCAwO1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uU2VsZWN0fT5cbiAgICAgICAgICAgIDxzcGFuPntwcm9wcy5pZH08L3NwYW4+XG4gICAgICAgICAgPC9hPn1cblxuICAgICAge3Byb3BzLmhhc1RyYW5zbGF0aW9uID09PSBmYWxzZVxuICAgICAgICA/IDxJY29uXG4gICAgICAgICAgICBpY29uPVwiZXJyb3JcIlxuICAgICAgICAgICAgaW50ZW50PVwiZGFuZ2VyXCJcbiAgICAgICAgICAgIHRpdGxlPXtgTWlzc2luZyB0cmFuc2xhdGlvbiBmb3IgJHtwcm9wcy50aXRsZX1gfVxuICAgICAgICAgICAgaHRtbFRpdGxlPXtgTWlzc2luZyB0cmFuc2xhdGlvbiBmb3IgJHtwcm9wcy50aXRsZX1gfVxuICAgICAgICAgIC8+XG4gICAgICAgIDogJyd9XG5cbiAgICA8Lz5cbiAgKTtcbn07XG4iXX0=