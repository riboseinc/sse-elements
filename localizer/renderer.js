import React, { useContext } from 'react';
import { Icon } from '@blueprintjs/core';
import styles from './styles.scss';
export const LangConfigContext = React.createContext({
    available: { en: 'English', zh: 'Chinese', ru: 'Russian' },
    default: 'en',
    selected: 'en',
    select: (id) => { },
});
export const Trans = function ({ what }) {
    const lang = useContext(LangConfigContext);
    const translated = what[lang.selected];
    const untranslated = what[lang.default];
    // const translated = translatable[lang.selected.id];
    // if (!translated) {
    //   // Register missing translation
    // }
    return React.createElement("span", null, translated || untranslated || '(malformed translatable string)');
};
export const LangSelector = function ({ value }) {
    const cfg = useContext(LangConfigContext);
    return (React.createElement("p", { className: styles.langSelector }, Object.keys(cfg.available).map((langId) => React.createElement(LangSelectorButton, { id: langId, title: cfg.available[langId], isSelected: langId === cfg.selected, onSelect: () => cfg.select(langId), hasTranslation: (value !== undefined) ? (value[langId] === undefined) : undefined }))));
};
const LangSelectorButton = function (props) {
    return (React.createElement(React.Fragment, null,
        props.isSelected
            ? React.createElement("strong", { className: styles.lang }, props.id)
            : React.createElement("a", { className: styles.lang, title: `Select ${props.title}`, href: "javascript: void 0;", onClick: props.onSelect },
                React.createElement("span", null, props.id)),
        props.hasTranslation === false
            ? React.createElement(Icon, { icon: "error", intent: "danger", title: `Missing translation for ${props.title}`, htmlTitle: `Missing translation for ${props.title}` })
            : ''));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9jYWxpemVyL3JlbmRlcmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMxQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJekMsT0FBTyxNQUFNLE1BQU0sZUFBZSxDQUFDO0FBUW5DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxhQUFhLENBQXdCO0lBQzFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFO0lBQzFELE9BQU8sRUFBRSxJQUFhO0lBQ3RCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsTUFBTSxFQUFFLENBQUMsRUFBVSxFQUFFLEVBQUUsR0FBRSxDQUFDO0NBQzNCLENBQUMsQ0FBQztBQUlILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBeUMsVUFBVSxFQUFFLElBQUksRUFBRTtJQUMzRSxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEMscURBQXFEO0lBQ3JELHFCQUFxQjtJQUNyQixvQ0FBb0M7SUFDcEMsSUFBSTtJQUVKLE9BQU8sa0NBQU8sVUFBVSxJQUFJLFlBQVksSUFBSSxpQ0FBaUMsQ0FBUSxDQUFDO0FBQ3hGLENBQUMsQ0FBQztBQU1GLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBZ0MsVUFBVSxFQUFFLEtBQUssRUFBRTtJQUMxRSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQ0wsMkJBQUcsU0FBUyxFQUFFLE1BQU0sQ0FBQyxZQUFZLElBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQ2pELG9CQUFDLGtCQUFrQixJQUNqQixFQUFFLEVBQUUsTUFBTSxFQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUM1QixVQUFVLEVBQUUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxRQUFRLEVBQ25DLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUNsQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQ2pGLENBQ0gsQ0FDQyxDQUNMLENBQUM7QUFDSixDQUFDLENBQUM7QUFVRixNQUFNLGtCQUFrQixHQUFzQyxVQUFVLEtBQUs7SUFDM0UsT0FBTyxDQUNMO1FBRUcsS0FBSyxDQUFDLFVBQVU7WUFDZixDQUFDLENBQUMsZ0NBQVEsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQzNCLEtBQUssQ0FBQyxFQUFFLENBQ0Y7WUFDWCxDQUFDLENBQUMsMkJBQ0ksU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQ3RCLEtBQUssRUFBRSxVQUFVLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFDOUIsSUFBSSxFQUFDLHFCQUFxQixFQUMxQixPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVE7Z0JBQ3pCLGtDQUFPLEtBQUssQ0FBQyxFQUFFLENBQVEsQ0FDckI7UUFFUCxLQUFLLENBQUMsY0FBYyxLQUFLLEtBQUs7WUFDN0IsQ0FBQyxDQUFDLG9CQUFDLElBQUksSUFDSCxJQUFJLEVBQUMsT0FBTyxFQUNaLE1BQU0sRUFBQyxRQUFRLEVBQ2YsS0FBSyxFQUFFLDJCQUEyQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQy9DLFNBQVMsRUFBRSwyQkFBMkIsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUNuRDtZQUNKLENBQUMsQ0FBQyxFQUFFLENBRUwsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuXG5pbXBvcnQgeyBTdXBwb3J0ZWRMYW5ndWFnZXMsIExhbmdDb25maWcsIFRyYW5zbGF0YWJsZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuXG5cbmludGVyZmFjZSBMYW5nQ29uZmlnQ29udGV4dFNwZWMgZXh0ZW5kcyBMYW5nQ29uZmlnIHtcbiAgYXZhaWxhYmxlOiBTdXBwb3J0ZWRMYW5ndWFnZXMsXG4gIHNlbGVjdChpZDogc3RyaW5nKTogdm9pZCxcbn1cblxuZXhwb3J0IGNvbnN0IExhbmdDb25maWdDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxMYW5nQ29uZmlnQ29udGV4dFNwZWM+KHtcbiAgYXZhaWxhYmxlOiB7IGVuOiAnRW5nbGlzaCcsIHpoOiAnQ2hpbmVzZScsIHJ1OiAnUnVzc2lhbicgfSxcbiAgZGVmYXVsdDogJ2VuJyBhcyBjb25zdCxcbiAgc2VsZWN0ZWQ6ICdlbicsXG4gIHNlbGVjdDogKGlkOiBzdHJpbmcpID0+IHt9LFxufSk7XG5cblxuaW50ZXJmYWNlIFRyYW5zbGF0YWJsZUNvbXBvbmVudFByb3BzIHsgd2hhdDogVHJhbnNsYXRhYmxlPHN0cmluZz4gfVxuZXhwb3J0IGNvbnN0IFRyYW5zOiBSZWFjdC5GQzxUcmFuc2xhdGFibGVDb21wb25lbnRQcm9wcz4gPSBmdW5jdGlvbiAoeyB3aGF0IH0pIHtcbiAgY29uc3QgbGFuZyA9IHVzZUNvbnRleHQoTGFuZ0NvbmZpZ0NvbnRleHQpO1xuICBjb25zdCB0cmFuc2xhdGVkID0gd2hhdFtsYW5nLnNlbGVjdGVkXTtcbiAgY29uc3QgdW50cmFuc2xhdGVkID0gd2hhdFtsYW5nLmRlZmF1bHRdO1xuXG4gIC8vIGNvbnN0IHRyYW5zbGF0ZWQgPSB0cmFuc2xhdGFibGVbbGFuZy5zZWxlY3RlZC5pZF07XG4gIC8vIGlmICghdHJhbnNsYXRlZCkge1xuICAvLyAgIC8vIFJlZ2lzdGVyIG1pc3NpbmcgdHJhbnNsYXRpb25cbiAgLy8gfVxuXG4gIHJldHVybiA8c3Bhbj57dHJhbnNsYXRlZCB8fCB1bnRyYW5zbGF0ZWQgfHwgJyhtYWxmb3JtZWQgdHJhbnNsYXRhYmxlIHN0cmluZyknfTwvc3Bhbj47XG59O1xuXG5cbmludGVyZmFjZSBMYW5nU2VsZWN0b3JQcm9wcyB7XG4gIHZhbHVlPzogVHJhbnNsYXRhYmxlPGFueT4sXG59XG5leHBvcnQgY29uc3QgTGFuZ1NlbGVjdG9yOiBSZWFjdC5GQzxMYW5nU2VsZWN0b3JQcm9wcz4gPSBmdW5jdGlvbiAoeyB2YWx1ZSB9KSB7XG4gIGNvbnN0IGNmZyA9IHVzZUNvbnRleHQoTGFuZ0NvbmZpZ0NvbnRleHQpO1xuXG4gIHJldHVybiAoXG4gICAgPHAgY2xhc3NOYW1lPXtzdHlsZXMubGFuZ1NlbGVjdG9yfT5cbiAgICAgIHtPYmplY3Qua2V5cyhjZmcuYXZhaWxhYmxlKS5tYXAoKGxhbmdJZDogc3RyaW5nKSA9PlxuICAgICAgICA8TGFuZ1NlbGVjdG9yQnV0dG9uXG4gICAgICAgICAgaWQ9e2xhbmdJZH1cbiAgICAgICAgICB0aXRsZT17Y2ZnLmF2YWlsYWJsZVtsYW5nSWRdfVxuICAgICAgICAgIGlzU2VsZWN0ZWQ9e2xhbmdJZCA9PT0gY2ZnLnNlbGVjdGVkfVxuICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiBjZmcuc2VsZWN0KGxhbmdJZCl9XG4gICAgICAgICAgaGFzVHJhbnNsYXRpb249eyh2YWx1ZSAhPT0gdW5kZWZpbmVkKSA/ICh2YWx1ZVtsYW5nSWRdID09PSB1bmRlZmluZWQpIDogdW5kZWZpbmVkfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L3A+XG4gICk7XG59O1xuXG5cbmludGVyZmFjZSBMYW5nU2VsZWN0b3JCdXR0b25Qcm9wcyB7XG4gIGlkOiBzdHJpbmcsXG4gIHRpdGxlOiBzdHJpbmcsXG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW4sXG4gIG9uU2VsZWN0OiAoKSA9PiB2b2lkLFxuICBoYXNUcmFuc2xhdGlvbjogYm9vbGVhbiB8IHVuZGVmaW5lZCxcbn1cbmNvbnN0IExhbmdTZWxlY3RvckJ1dHRvbjogUmVhY3QuRkM8TGFuZ1NlbGVjdG9yQnV0dG9uUHJvcHM+ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPD5cblxuICAgICAge3Byb3BzLmlzU2VsZWN0ZWRcbiAgICAgICAgPyA8c3Ryb25nIGNsYXNzTmFtZT17c3R5bGVzLmxhbmd9PlxuICAgICAgICAgICAge3Byb3BzLmlkfVxuICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICA6IDxhXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmxhbmd9XG4gICAgICAgICAgICAgIHRpdGxlPXtgU2VsZWN0ICR7cHJvcHMudGl0bGV9YH1cbiAgICAgICAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6IHZvaWQgMDtcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy5vblNlbGVjdH0+XG4gICAgICAgICAgICA8c3Bhbj57cHJvcHMuaWR9PC9zcGFuPlxuICAgICAgICAgIDwvYT59XG5cbiAgICAgIHtwcm9wcy5oYXNUcmFuc2xhdGlvbiA9PT0gZmFsc2VcbiAgICAgICAgPyA8SWNvblxuICAgICAgICAgICAgaWNvbj1cImVycm9yXCJcbiAgICAgICAgICAgIGludGVudD1cImRhbmdlclwiXG4gICAgICAgICAgICB0aXRsZT17YE1pc3NpbmcgdHJhbnNsYXRpb24gZm9yICR7cHJvcHMudGl0bGV9YH1cbiAgICAgICAgICAgIGh0bWxUaXRsZT17YE1pc3NpbmcgdHJhbnNsYXRpb24gZm9yICR7cHJvcHMudGl0bGV9YH1cbiAgICAgICAgICAvPlxuICAgICAgICA6ICcnfVxuXG4gICAgPC8+XG4gICk7XG59O1xuIl19