{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/localizer/renderer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAIzC,OAAO,KAAK,MAAM,MAAM,eAAe,CAAC;AAQxC,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAa,CAAwB;IAC1E,SAAS,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE;IAC1D,OAAO,EAAE,IAAI;IACb,QAAQ,EAAE,IAAI;IACd,MAAM,EAAE,CAAC,EAAU,EAAE,EAAE,GAAE,CAAC;CAC3B,CAAC,CAAC;AAIH,MAAM,CAAC,MAAM,KAAK,GAAyC,UAAU,EAAE,IAAI,EAAE;IAC3E,MAAM,IAAI,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAExC,qDAAqD;IACrD,qBAAqB;IACrB,oCAAoC;IACpC,IAAI;IAEJ,OAAO,kCAAO,UAAU,IAAI,YAAY,IAAI,iCAAiC,CAAQ,CAAC;AACxF,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,YAAY,GAAgC,UAAU,EAAE,KAAK,EAAE;IAC1E,MAAM,GAAG,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAE1C,OAAO,CACL,2BAAG,SAAS,EAAE,MAAM,CAAC,YAAY,IAC9B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE,CACjD,oBAAC,kBAAkB,IACjB,EAAE,EAAE,MAAM,EACV,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,EAC5B,UAAU,EAAE,MAAM,KAAK,GAAG,CAAC,QAAQ,EACnC,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAClC,cAAc,EAAE,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,GACjF,CACH,CACC,CACL,CAAC;AACJ,CAAC,CAAC;AAUF,MAAM,kBAAkB,GAAsC,UAAU,KAAK;IAC3E,OAAO,CACL;QAEG,KAAK,CAAC,UAAU;YACf,CAAC,CAAC,gCAAQ,SAAS,EAAE,MAAM,CAAC,IAAI,IAC3B,KAAK,CAAC,EAAE,CACF;YACX,CAAC,CAAC,2BACI,SAAS,EAAE,MAAM,CAAC,IAAI,EACtB,KAAK,EAAE,UAAU,KAAK,CAAC,KAAK,EAAE,EAC9B,IAAI,EAAC,qBAAqB,EAC1B,OAAO,EAAE,KAAK,CAAC,QAAQ;gBACzB,kCAAO,KAAK,CAAC,EAAE,CAAQ,CACrB;QAEP,KAAK,CAAC,cAAc,KAAK,KAAK;YAC7B,CAAC,CAAC,oBAAC,IAAI,IACH,IAAI,EAAC,OAAO,EACZ,MAAM,EAAC,QAAQ,EACf,KAAK,EAAE,2BAA2B,KAAK,CAAC,KAAK,EAAE,EAC/C,SAAS,EAAE,2BAA2B,KAAK,CAAC,KAAK,EAAE,GACnD;YACJ,CAAC,CAAC,EAAE,CAEL,CACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { useContext } from 'react';\nimport { Icon } from '@blueprintjs/core';\n\nimport { SupportedLanguages, LangConfig, Translatable } from './types';\n\nimport * as styles from './styles.scss';\n\n\ninterface LangConfigContextSpec extends LangConfig {\n  available: SupportedLanguages,\n  select(id: string): void,\n}\n\nexport const LangConfigContext = React.createContext<LangConfigContextSpec>({\n  available: { en: 'English', zh: 'Chinese', ru: 'Russian' },\n  default: 'en',\n  selected: 'en',\n  select: (id: string) => {},\n});\n\n\ninterface TranslatableComponentProps { what: Translatable<string> }\nexport const Trans: React.FC<TranslatableComponentProps> = function ({ what }) {\n  const lang = useContext(LangConfigContext);\n  const translated = what[lang.selected];\n  const untranslated = what[lang.default];\n\n  // const translated = translatable[lang.selected.id];\n  // if (!translated) {\n  //   // Register missing translation\n  // }\n\n  return <span>{translated || untranslated || '(malformed translatable string)'}</span>;\n};\n\n\ninterface LangSelectorProps {\n  value?: Translatable<any>,\n}\nexport const LangSelector: React.FC<LangSelectorProps> = function ({ value }) {\n  const cfg = useContext(LangConfigContext);\n\n  return (\n    <p className={styles.langSelector}>\n      {Object.keys(cfg.available).map((langId: string) =>\n        <LangSelectorButton\n          id={langId}\n          title={cfg.available[langId]}\n          isSelected={langId === cfg.selected}\n          onSelect={() => cfg.select(langId)}\n          hasTranslation={(value !== undefined) ? (value[langId] === undefined) : undefined}\n        />\n      )}\n    </p>\n  );\n};\n\n\ninterface LangSelectorButtonProps {\n  id: string,\n  title: string,\n  isSelected: boolean,\n  onSelect: () => void,\n  hasTranslation: boolean | undefined,\n}\nconst LangSelectorButton: React.FC<LangSelectorButtonProps> = function (props) {\n  return (\n    <>\n\n      {props.isSelected\n        ? <strong className={styles.lang}>\n            {props.id}\n          </strong>\n        : <a\n              className={styles.lang}\n              title={`Select ${props.title}`}\n              href=\"javascript: void 0;\"\n              onClick={props.onSelect}>\n            <span>{props.id}</span>\n          </a>}\n\n      {props.hasTranslation === false\n        ? <Icon\n            icon=\"error\"\n            intent=\"danger\"\n            title={`Missing translation for ${props.title}`}\n            htmlTitle={`Missing translation for ${props.title}`}\n          />\n        : ''}\n\n    </>\n  );\n};\n"]}