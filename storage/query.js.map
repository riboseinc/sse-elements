{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/storage/query.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,QAAQ;IAMnB,YACI,KAAe,EACf,QAAqB,2BAA2B,EAChD,QAAmC,SAAS,EAC5C,OAAO,GAAG,KAAK;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACjE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IACD,GAAG,CAAC,EAAU;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC;IACD,GAAG,CAAC,GAAM;QACR,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IAC3B,CAAC;IACD,OAAO,CAAC,UAAuB;QAC7B,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;IACtF,CAAC;IACD,MAAM,CAAC,IAAoC;QACzC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtF,CAAC;IACD,GAAG;QACD,OAAO,IAAI,CAAC,QAAQ;YAClB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF;AAID,MAAM,CAAC,MAAM,2BAA2B,GAAgB,UAAU,CAAC,EAAE,CAAC;IACpE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,qBAAqB,GAAgB,UAAU,CAAoB,EAAE,CAAoB;IACpG,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,oBAAoB,GAAgB,UAAU,CAAoB,EAAE,CAAoB;IACnG,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD,CAAC,CAAA","sourcesContent":["export interface IndexableObject { id: string | number, [key: string]: any }\n\nexport interface Index<T extends IndexableObject> { [id: string]: T }\n\ninterface ArraySorter { (a: [string, unknown], b: [string, unknown]): number }\n\nexport class QuerySet<T extends IndexableObject> {\n  index: Index<T>;\n  order: ArraySorter;\n  items: [string, T][];\n  _ordered: boolean;\n\n  constructor(\n      index: Index<T>,\n      order: ArraySorter = sortAlphabeticallyAscending,\n      items: [string, T][] | undefined = undefined,\n      ordered = false) {\n    this.index = index;\n    this.items = items === undefined ? Object.entries(index) : items;\n    this.order = order;\n    this._ordered = ordered;\n  }\n  get(id: string): T {\n    return this.index[id];\n  }\n  add(obj: T): void {\n    this.index[obj.id] = obj;\n  }\n  orderBy(comparison: ArraySorter) {\n    return new QuerySet(this.index, this.order, [...this.items].sort(comparison), true);\n  }\n  filter(func: (item: [string, T]) => boolean) {\n    return new QuerySet(this.index, this.order, this.items.filter(func), this._ordered);\n  }\n  all() {\n    return this._ordered\n      ? this.items.map(item => item[1])\n      : this.orderBy(this.order).items.map(item => item[1]);\n  }\n}\n\n\n\nexport const sortAlphabeticallyAscending: ArraySorter = function (a, b) {\n  return a[0].localeCompare(b[0]);\n}\nexport const sortIntegerDescending: ArraySorter = function (a: [string, unknown], b: [string, unknown]): number {\n  return parseInt(b[0], 10) - parseInt(a[0], 10);\n}\nexport const sortIntegerAscending: ArraySorter = function (a: [string, unknown], b: [string, unknown]): number {\n  return parseInt(a[0], 10) - parseInt(b[0], 10);\n}\n"]}