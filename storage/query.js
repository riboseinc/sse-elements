export class QuerySet {
    constructor(index, order = sortAlphabeticallyAscending, items = undefined, ordered = false) {
        this.index = index;
        this.items = items === undefined ? Object.entries(index) : items;
        this.order = order;
        this._ordered = ordered;
    }
    get(id) {
        return this.index[id];
    }
    add(obj) {
        this.index[obj.id] = obj;
    }
    orderBy(comparison) {
        return new QuerySet(this.index, this.order, [...this.items].sort(comparison), true);
    }
    filter(func) {
        return new QuerySet(this.index, this.order, this.items.filter(func), this._ordered);
    }
    all() {
        return this._ordered
            ? this.items.map(item => item[1])
            : this.orderBy(this.order).items.map(item => item[1]);
    }
}
export const sortAlphabeticallyAscending = function (a, b) {
    return a[0].localeCompare(b[0]);
};
export const sortIntegerDescending = function (a, b) {
    return parseInt(b[0], 10) - parseInt(a[0], 10);
};
export const sortIntegerAscending = function (a, b) {
    return parseInt(a[0], 10) - parseInt(b[0], 10);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RvcmFnZS9xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErQkEsTUFBTSxPQUFPLFFBQVE7SUFRbkIsWUFDSSxLQUFlLEVBQ2YsUUFBcUIsMkJBQTJCLEVBQ2hELFFBQW1DLFNBQVMsRUFDNUMsT0FBTyxHQUFHLEtBQUs7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUNELEdBQUcsQ0FBQyxFQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxHQUFHLENBQUMsR0FBTTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzQixDQUFDO0lBQ0QsT0FBTyxDQUFDLFVBQXVCO1FBQzdCLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBb0M7UUFDekMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxHQUFHO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUTtZQUNsQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0Y7QUFJRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBZ0IsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUNwRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQWdCLFVBQVUsQ0FBb0IsRUFBRSxDQUFvQjtJQUNwRyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBZ0IsVUFBVSxDQUFvQixFQUFFLENBQW9CO0lBQ25HLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEFueUlEVHlwZSA9IHN0cmluZyB8IG51bWJlcjtcbi8qIFBvc3NpYmxlIElEIHR5cGVzLiAqL1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhhYmxlT2JqZWN0PElEVHlwZSBleHRlbmRzIEFueUlEVHlwZSA9IEFueUlEVHlwZT4ge1xuICAvKiBBbiBpbmRleGFibGUgb2JqZWN0IGlzIGFuIG9iamVjdCB0aGF0IGhhcyBhdCBsZWFzdCBhbiBgaWRgIHByb3BlcnR5XG4gICAgIGFsb25nc2lkZSB3aGF0ZXZlciBlbHNlIGZpZWxkcyBkZXNjcmliZSB0aGF0IG9iamVjdC5cblxuICAgICBNYXkgYmUgbW9yZSBhcHByb3ByaWF0ZWx5IG5hbWVkIENvbnRlbnRUeXBlLiAqL1xuXG4gIGlkOiBJRFR5cGUsXG4gIFtmaWVsZE5hbWU6IHN0cmluZ106IGFueSxcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4PFQgZXh0ZW5kcyBJbmRleGFibGVPYmplY3Q+IHtcbiAgLyogQW4gaW5kZXggaXMgYSBzaW1wbGUgb2JqZWN0XG4gICAgIHdoZXJlIGVhY2gga2V5IGlzIGEgc3RyaW5naWZpZWQgdmFsdWUgb2Ygc29tZSBwcm9wZXJ0eSBvZiBvYmplY3QgVCxcbiAgICAgYW5kIHRoZSB2YWx1ZSBpcyBhc3NpZ25lZCB0aGUgY29ycmVzcG9uZGluZyBvYmplY3QgaW5zdGFuY2VcbiAgICAgZm9yIGRpcmVjdCBhY2Nlc3MuXG5cbiAgICAgVGhlIHByb3BlcnR5IGluIHF1ZXN0aW9uIG11c3Qgb2J2aW91c2x5IG5vdCBoYXZlIGR1cGxpY2F0ZSB2YWx1ZXNcbiAgICAgYWNyb3NzIGFsbCBvYmplY3RzLiAqL1xuXG4gIFtzdHJpbmdpZmllZEZpZWxkVmFsdWU6IHN0cmluZ106IFQsXG59XG5cblxuaW50ZXJmYWNlIEFycmF5U29ydGVyIHsgKGE6IFtzdHJpbmcsIHVua25vd25dLCBiOiBbc3RyaW5nLCB1bmtub3duXSk6IG51bWJlciB9XG5cblxuZXhwb3J0IGNsYXNzIFF1ZXJ5U2V0PFQgZXh0ZW5kcyBJbmRleGFibGVPYmplY3Q+IHtcbiAgLyogU2ltcGxpZmllcyBzb21lIG9wZXJhdGlvbnMgb24gaW5kZXhlcywgbGlrZSBhIG1pbmktcHNldWRvLU9STS4gKi9cblxuICBpbmRleDogSW5kZXg8VD47XG4gIG9yZGVyOiBBcnJheVNvcnRlcjtcbiAgaXRlbXM6IFtzdHJpbmcsIFRdW107XG4gIF9vcmRlcmVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgaW5kZXg6IEluZGV4PFQ+LFxuICAgICAgb3JkZXI6IEFycmF5U29ydGVyID0gc29ydEFscGhhYmV0aWNhbGx5QXNjZW5kaW5nLFxuICAgICAgaXRlbXM6IFtzdHJpbmcsIFRdW10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXG4gICAgICBvcmRlcmVkID0gZmFsc2UpIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zID09PSB1bmRlZmluZWQgPyBPYmplY3QuZW50cmllcyhpbmRleCkgOiBpdGVtcztcbiAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgdGhpcy5fb3JkZXJlZCA9IG9yZGVyZWQ7XG4gIH1cbiAgZ2V0KGlkOiBzdHJpbmcpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleFtpZF07XG4gIH1cbiAgYWRkKG9iajogVCk6IHZvaWQge1xuICAgIHRoaXMuaW5kZXhbb2JqLmlkXSA9IG9iajtcbiAgfVxuICBvcmRlckJ5KGNvbXBhcmlzb246IEFycmF5U29ydGVyKSB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeVNldCh0aGlzLmluZGV4LCB0aGlzLm9yZGVyLCBbLi4udGhpcy5pdGVtc10uc29ydChjb21wYXJpc29uKSwgdHJ1ZSk7XG4gIH1cbiAgZmlsdGVyKGZ1bmM6IChpdGVtOiBbc3RyaW5nLCBUXSkgPT4gYm9vbGVhbikge1xuICAgIHJldHVybiBuZXcgUXVlcnlTZXQodGhpcy5pbmRleCwgdGhpcy5vcmRlciwgdGhpcy5pdGVtcy5maWx0ZXIoZnVuYyksIHRoaXMuX29yZGVyZWQpO1xuICB9XG4gIGFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3JkZXJlZFxuICAgICAgPyB0aGlzLml0ZW1zLm1hcChpdGVtID0+IGl0ZW1bMV0pXG4gICAgICA6IHRoaXMub3JkZXJCeSh0aGlzLm9yZGVyKS5pdGVtcy5tYXAoaXRlbSA9PiBpdGVtWzFdKTtcbiAgfVxufVxuXG5cblxuZXhwb3J0IGNvbnN0IHNvcnRBbHBoYWJldGljYWxseUFzY2VuZGluZzogQXJyYXlTb3J0ZXIgPSBmdW5jdGlvbiAoYSwgYikge1xuICByZXR1cm4gYVswXS5sb2NhbGVDb21wYXJlKGJbMF0pO1xufVxuZXhwb3J0IGNvbnN0IHNvcnRJbnRlZ2VyRGVzY2VuZGluZzogQXJyYXlTb3J0ZXIgPSBmdW5jdGlvbiAoYTogW3N0cmluZywgdW5rbm93bl0sIGI6IFtzdHJpbmcsIHVua25vd25dKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBhcnNlSW50KGJbMF0sIDEwKSAtIHBhcnNlSW50KGFbMF0sIDEwKTtcbn1cbmV4cG9ydCBjb25zdCBzb3J0SW50ZWdlckFzY2VuZGluZzogQXJyYXlTb3J0ZXIgPSBmdW5jdGlvbiAoYTogW3N0cmluZywgdW5rbm93bl0sIGI6IFtzdHJpbmcsIHVua25vd25dKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBhcnNlSW50KGFbMF0sIDEwKSAtIHBhcnNlSW50KGJbMF0sIDEwKTtcbn1cbiJdfQ==