{"version":3,"file":"yaml.js","sourceRoot":"","sources":["../../../src/storage/main/yaml.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAGvD,MAAM,OAAO,WAAW;IACtB,YAAoB,EAAO;QAAP,OAAE,GAAF,EAAE,CAAK;IAAI,CAAC;IAEzB,KAAK,CAAC,IAAI,CAAC,QAAgB;QAChC,MAAM,IAAI,GAAW,MAAM,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7C,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,QAAgB;QACzC,IAAI,UAAmB,CAAC;QACxB,IAAI,OAAY,CAAC;QAEjB,IAAI;YACF,UAAU,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC;SAC/D;QAAC,OAAO,CAAC,EAAE;YACV,UAAU,GAAG,KAAK,CAAC;SACpB;QAED,IAAI,UAAU,EAAE;YACd,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;aAAM;YACL,OAAO,GAAG,EAAE,CAAC;SACd;QAED,OAAO,OAAO,IAAI,EAAE,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,QAAgB,EAAE,IAAS;QAC5C,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACvC,iEAAiE;YACjE,4DAA4D;YAC5D,IAAI,OAAY,CAAC;YACjB,IAAI,OAAY,CAAC;YACjB,IAAI,WAAmB,CAAC;YAExB,IAAI;gBACF,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC5C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACxC;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBACpD,MAAM,CAAC,CAAC;aACT;YAED,kEAAkE;YAClE,0BAA0B;YAE1B,IAAI;gBACF,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBAC/B,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,IAAI;oBACZ,YAAY,EAAE,IAAI;iBACnB,CAAC,CAAC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,kBAAkB,QAAQ,SAAS,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC5E,OAAO;aACR;YAED,uEAAuE;YAEvE,oBAAoB;YACpB,wFAAwF;YACxF,kFAAkF;YAClF,IAAI;YAEJ,MAAM,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACrE,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAChC;IACH,CAAC;CACF;AAGD,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC;IAC7B,OAAO,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAEnC,4EAA4E;IAC5E,QAAQ,EAAE;QACR,GAAI,IAAI,CAAC,mBAA2B,CAAC,QAAQ;QAC7C,GAAG,CAAC,mBAAmB,CAAC;KACzB;CACF,CAAC,CAAC","sourcesContent":["import * as yaml from 'js-yaml';\nimport { customTimestampType } from './yaml-custom-ts';\n\n\nexport class YAMLStorage {\n  constructor(private fs: any) { }\n\n  public async load(filePath: string): Promise<any> {\n    const data: string = await this.fs.readFile(filePath, { encoding: 'utf8' });\n    return yaml.load(data, { schema: SCHEMA });\n  }\n\n  private async loadIfExists(filePath: string): Promise<any> {\n    let fileExists: boolean;\n    let oldData: any;\n\n    try {\n      fileExists = (await this.fs.stat(filePath)).isFile() === true;\n    } catch (e) {\n      fileExists = false;\n    }\n\n    if (fileExists) {\n      oldData = await this.load(filePath);\n    } else {\n      oldData = {};\n    }\n\n    return oldData || {};\n  }\n\n  public async store(filePath: string, data: any): Promise<any> {\n    if (data !== undefined && data !== null) {\n      // Merge new data into old data; this way if some YAML properties\n      // are not supported we will not lose them after the update.\n      let newData: any;\n      let oldData: any;\n      let newContents: string;\n\n      try {\n        oldData = await this.loadIfExists(filePath);\n        newData = Object.assign(oldData, data);\n      } catch (e) {\n        console.error(\"Bad input\", filePath, oldData, data);\n        throw e;\n      }\n\n      // console.debug(`Dumping contents for ${filePath} from ${data}`);\n      // console.debug(oldData);\n\n      try {\n        newContents = yaml.dump(newData, {\n          schema: SCHEMA,\n          noRefs: true,\n          noCompatMode: true,\n        });\n      } catch (e) {\n        console.error(`Failed to save ${filePath} with ${JSON.stringify(newData)}`);\n        return;\n      }\n\n      // console.debug(`Writing to ${filePath}, file exists: ${fileExists}`);\n\n      // if (fileExists) {\n      //   const oldContents: string = await this.fs.readFile(filePath, { encoding: 'utf8' });\n      //   console.debug(`Replacing contents of ${filePath}`, oldContents, newContents);\n      // }\n\n      await this.fs.writeFile(filePath, newContents, { encoding: 'utf8' });\n      return data;\n    } else {\n      await this.fs.remove(filePath);\n    }\n  }\n}\n\n\nconst SCHEMA = new yaml.Schema({\n  include: [yaml.DEFAULT_SAFE_SCHEMA],\n\n  // Trick because js-yaml API appears to not support augmenting implicit tags\n  implicit: [\n    ...(yaml.DEFAULT_SAFE_SCHEMA as any).implicit,\n    ...[customTimestampType],\n  ],\n});\n"]}