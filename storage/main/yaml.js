import AsyncLock from 'async-lock';
import * as log from 'electron-log';
import * as yaml from 'js-yaml';
import { Schema as SCHEMA } from './filesystem/yaml/schema';
export class YAMLStorage {
    constructor(fs, opts = { debugLog: false }) {
        this.fs = fs;
        this.opts = opts;
        this.fileWriteLock = new AsyncLock();
    }
    debugLog(message, level = 'debug') {
        if (this.opts.debugLog) {
            log[level](message);
        }
    }
    async load(filePath) {
        this.debugLog(`SSE: YAMLStorage: Loading ${filePath}`);
        const data = await this.fs.readFile(filePath, { encoding: 'utf8' });
        return yaml.load(data, { schema: SCHEMA });
    }
    async store(filePath, data) {
        this.debugLog(`SSE: YAMLStorage: Storing ${filePath}`);
        this.debugLog(`SSE: YAMLStorage: Storing ${filePath}: ${JSON.stringify(data)}`, 'silly');
        // Ensure the same file is not written to simultaneously from two separate store() calls
        return await this.fileWriteLock.acquire(filePath, async () => {
            this.debugLog(`SSE: YAMLStorage: Start writing ${filePath}`);
            if (data !== undefined && data !== null) {
                let newContents;
                try {
                    newContents = yaml.dump(data, {
                        schema: SCHEMA,
                        noRefs: true,
                        noCompatMode: true,
                    });
                }
                catch (e) {
                    log.error(`SSE: YAMLStorage: Failed to dump ${filePath}: ${JSON.stringify(data)}`);
                    console.error(`Failed to save ${filePath} with ${JSON.stringify(data)}`, e);
                    return;
                }
                this.debugLog(`SSE: YAMLStorage: Storing ${filePath}: Writing file`);
                this.debugLog(`SSE: YAMLStorage: Storing ${filePath}: Writing file: ${newContents}`, 'silly');
                await this.fs.writeFile(filePath, newContents, { encoding: 'utf8' });
            }
            else {
                this.debugLog(`SSE: YAMLStorage: Storing ${filePath}: Empty data given, removing file`);
                await this.fs.remove(filePath);
            }
            this.debugLog(`SSE: YAMLStorage: Finish writing ${filePath}`);
            return data;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yYWdlL21haW4veWFtbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxLQUFLLElBQUksTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLE1BQU0sSUFBSSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQVE1RCxNQUFNLE9BQU8sV0FBVztJQUd0QixZQUFvQixFQUFPLEVBQVUsT0FBMkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO1FBQS9ELE9BQUUsR0FBRixFQUFFLENBQUs7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUEwQztRQUNqRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVPLFFBQVEsQ0FBQyxPQUFlLEVBQUUsUUFBMkIsT0FBTztRQUNsRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQWdCO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsNkJBQTZCLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdkQsTUFBTSxJQUFJLEdBQVcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM1RSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBZ0IsRUFBRSxJQUFTO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsNkJBQTZCLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDdEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsUUFBUSxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV6Rix3RkFBd0Y7UUFDeEYsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBRTdELElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUN2QyxJQUFJLFdBQW1CLENBQUM7Z0JBQ3hCLElBQUk7b0JBQ0YsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO3dCQUM1QixNQUFNLEVBQUUsTUFBTTt3QkFDZCxNQUFNLEVBQUUsSUFBSTt3QkFDWixZQUFZLEVBQUUsSUFBSTtxQkFDbkIsQ0FBQyxDQUFDO2lCQUNKO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNWLEdBQUcsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkYsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsUUFBUSxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDNUUsT0FBTztpQkFDUjtnQkFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixRQUFRLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3JFLElBQUksQ0FBQyxRQUFRLENBQUMsNkJBQTZCLFFBQVEsbUJBQW1CLFdBQVcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUU5RixNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUV0RTtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixRQUFRLG1DQUFtQyxDQUFDLENBQUM7Z0JBRXhGLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7YUFFaEM7WUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLG9DQUFvQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJ2VsZWN0cm9uLWxvZyc7XG5pbXBvcnQgKiBhcyB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IHsgU2NoZW1hIGFzIFNDSEVNQSB9IGZyb20gJy4vZmlsZXN5c3RlbS95YW1sL3NjaGVtYSc7XG5cblxuaW50ZXJmYWNlIFlBTUxTdG9yYWdlT3B0aW9ucyB7XG4gIGRlYnVnTG9nOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBZQU1MU3RvcmFnZSB7XG4gIHByaXZhdGUgZmlsZVdyaXRlTG9jazogQXN5bmNMb2NrO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnM6IGFueSwgcHJpdmF0ZSBvcHRzOiBZQU1MU3RvcmFnZU9wdGlvbnMgPSB7IGRlYnVnTG9nOiBmYWxzZSB9KSB7XG4gICAgdGhpcy5maWxlV3JpdGVMb2NrID0gbmV3IEFzeW5jTG9jaygpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWJ1Z0xvZyhtZXNzYWdlOiBzdHJpbmcsIGxldmVsOiAnc2lsbHknIHwgJ2RlYnVnJyA9ICdkZWJ1ZycpIHtcbiAgICBpZiAodGhpcy5vcHRzLmRlYnVnTG9nKSB7XG4gICAgICBsb2dbbGV2ZWxdKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2FkKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuZGVidWdMb2coYFNTRTogWUFNTFN0b3JhZ2U6IExvYWRpbmcgJHtmaWxlUGF0aH1gKTtcbiAgICBjb25zdCBkYXRhOiBzdHJpbmcgPSBhd2FpdCB0aGlzLmZzLnJlYWRGaWxlKGZpbGVQYXRoLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgcmV0dXJuIHlhbWwubG9hZChkYXRhLCB7IHNjaGVtYTogU0NIRU1BIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKGZpbGVQYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5kZWJ1Z0xvZyhgU1NFOiBZQU1MU3RvcmFnZTogU3RvcmluZyAke2ZpbGVQYXRofWApXG4gICAgdGhpcy5kZWJ1Z0xvZyhgU1NFOiBZQU1MU3RvcmFnZTogU3RvcmluZyAke2ZpbGVQYXRofTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gLCAnc2lsbHknKTtcblxuICAgIC8vIEVuc3VyZSB0aGUgc2FtZSBmaWxlIGlzIG5vdCB3cml0dGVuIHRvIHNpbXVsdGFuZW91c2x5IGZyb20gdHdvIHNlcGFyYXRlIHN0b3JlKCkgY2FsbHNcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maWxlV3JpdGVMb2NrLmFjcXVpcmUoZmlsZVBhdGgsIGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuZGVidWdMb2coYFNTRTogWUFNTFN0b3JhZ2U6IFN0YXJ0IHdyaXRpbmcgJHtmaWxlUGF0aH1gKTtcblxuICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCAmJiBkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIGxldCBuZXdDb250ZW50czogc3RyaW5nO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ld0NvbnRlbnRzID0geWFtbC5kdW1wKGRhdGEsIHtcbiAgICAgICAgICAgIHNjaGVtYTogU0NIRU1BLFxuICAgICAgICAgICAgbm9SZWZzOiB0cnVlLFxuICAgICAgICAgICAgbm9Db21wYXRNb2RlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGBTU0U6IFlBTUxTdG9yYWdlOiBGYWlsZWQgdG8gZHVtcCAke2ZpbGVQYXRofTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gc2F2ZSAke2ZpbGVQYXRofSB3aXRoICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhgU1NFOiBZQU1MU3RvcmFnZTogU3RvcmluZyAke2ZpbGVQYXRofTogV3JpdGluZyBmaWxlYCk7XG4gICAgICAgIHRoaXMuZGVidWdMb2coYFNTRTogWUFNTFN0b3JhZ2U6IFN0b3JpbmcgJHtmaWxlUGF0aH06IFdyaXRpbmcgZmlsZTogJHtuZXdDb250ZW50c31gLCAnc2lsbHknKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmZzLndyaXRlRmlsZShmaWxlUGF0aCwgbmV3Q29udGVudHMsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhgU1NFOiBZQU1MU3RvcmFnZTogU3RvcmluZyAke2ZpbGVQYXRofTogRW1wdHkgZGF0YSBnaXZlbiwgcmVtb3ZpbmcgZmlsZWApO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuZnMucmVtb3ZlKGZpbGVQYXRoKTtcblxuICAgICAgfVxuICAgICAgdGhpcy5kZWJ1Z0xvZyhgU1NFOiBZQU1MU3RvcmFnZTogRmluaXNoIHdyaXRpbmcgJHtmaWxlUGF0aH1gKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pO1xuICB9XG59XG4iXX0=