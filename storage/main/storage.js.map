{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../src/storage/main/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport { makeEndpoint } from 'api/main';\n\nimport { Index, IndexableObject } from '../query';\nimport { Workspace } from '../workspace';\n\nimport { YAMLStorage } from './yaml';\n\n\nconst YAML_EXT = '.yaml';\n\n\nexport abstract class StoreManager<O extends IndexableObject> {\n  private _index: Index<O> | undefined = undefined;\n\n  constructor(public rootDir: string) {}\n\n  public async storeIndex(storage: Storage<any>, newIdx: Index<O> | undefined): Promise<boolean> {\n    const idx: Index<O> = newIdx || await this.getIndex(storage);\n    const items: O[] = Object.values(idx);\n\n    for (const obj of items) {\n      await this.store(obj, storage);\n    }\n\n    this._index = idx;\n    return true;\n  }\n\n  public async getIndex(storage: Storage<any>): Promise<Index<O>> {\n    if (this._index === undefined) {\n      this._index = await this._loadIndex(storage);\n    }\n    return this._index;\n  }\n\n  public async findObjects(storage: Storage<any>, query?: string): Promise<Index<O>> {\n    const index = await this.getIndex(storage);\n    if (query !== undefined) {\n      var results: Index<O> = {};\n      for (let key of Object.keys(index)) {\n        const obj = index[key]\n        if (this.objectMatchesQuery(obj, query)) {\n          results[key] = obj;\n        }\n      }\n      return results;\n    } else {\n      return index;\n    }\n  }\n\n  private async _loadIndex(storage: Storage<any>): Promise<Index<O>> {\n    const rootPath = this.rootDir;\n    const dirs = await storage.fs.readdir(path.join(storage.workDir, rootPath));\n    var idx: Index<O> = {};\n\n    for (const dir of dirs) {\n      if (dir != '.DS_Store') {\n        const objData = await storage.loadObject(path.join(rootPath, dir));\n        if (objData) {\n          const obj: O = this.postLoad(objData);\n          if (obj.id) {\n            idx[obj.id] = obj;\n          }\n        }\n      }\n    }\n    return idx;\n  }\n\n  // TODO: Use `toUseableObject(data: any) => O` to post-process loaded data\n\n  // Stores object in DB\n  public async store(obj: O, storage: Storage<any>): Promise<boolean> {\n    const objDir = path.join(this.rootDir, `${obj.id}`);\n    const objPath = path.join(storage.workDir, objDir);\n    const storeable = this.toStoreableObject(obj);\n    const idx = await this.getIndex(storage);\n\n    await storage.fs.ensureDir(objPath);\n    for (const key of Object.keys(storeable)) {\n      const data = storeable[key];\n      await storage.yaml.store(path.join(objPath, `${key}.yaml`), data);\n    }\n\n    idx[obj.id] = obj;\n    this._index = idx;\n    return true;\n  }\n\n  public toStoreableObject(obj: O): any {\n    return { meta: obj as any };\n  };\n\n  // Converts object data into valid object, if needed\n  // (in cases when partial data is stored or migration took place previously)\n  public postLoad(obj: any): O {\n    return obj as O;\n  }\n\n  public objectMatchesQuery(obj: O, query: string): boolean {\n    return false;\n  }\n}\n\n\nexport abstract class Storage<W extends Workspace> {\n  public yaml: YAMLStorage;\n  public workspace: W;\n\n  constructor(public fs: typeof import('fs-extra'), public workDir: string,\n      public storeManagers: { [key: string]: StoreManager<any> }) {\n    this.fs = fs;\n    this.workDir = workDir;\n    this.yaml = new YAMLStorage(fs);\n\n    this.workspace = Object.keys(storeManagers).reduce((obj: any, key: string) => {\n      obj[key] = {};\n      return obj;\n    }, {}) as W;\n  }\n\n  public abstract async findObjects(query?: string): Promise<W>\n\n  public async loadWorkspace(): Promise<void> {\n    this.workspace = await Object.keys(this.storeManagers).reduce(async (objP: Promise<any>, key: string) => {\n      const obj = await objP;\n      obj[key] = await this.storeManagers[key].getIndex(this);\n      return obj;\n    }, Promise.resolve({})) as W;\n  }\n\n  async storeWorkspace(): Promise<boolean> {\n    return Promise.all([...Object.keys(this.storeManagers).map(async (key) => {\n      return await this.storeManagers[key].storeIndex(this, this.workspace[key]);\n    })]).then(() => true);\n  }\n\n  // Loads object data from given directory, reading YAML files.\n  // meta.yaml is treated specially, populating top-level object payload.\n  // Other YAML files populate corresponding object properties.\n  public async loadObject(objDir: string): Promise<any | undefined> {\n    let objData: {[propName: string]: any};\n\n    const metaFile = path.join(this.workDir, objDir, 'meta.yaml');\n    let metaFileIsFile: boolean;\n    try {\n      metaFileIsFile = (await this.fs.stat(metaFile)).isFile();\n    } catch (e) {\n      return undefined;\n    }\n    if (!metaFileIsFile) {\n      return undefined;\n    }\n    objData = await this.yaml.load(metaFile);\n\n    const dirContents = await this.fs.readdir(path.join(this.workDir, objDir));\n    for (const item of dirContents) {\n      if (path.extname(item) == YAML_EXT) {\n        const basename = path.basename(item, YAML_EXT);\n        if (basename != 'meta') {\n          objData[basename] = await this.yaml.load(path.join(this.workDir, objDir, item));\n        }\n      }\n    }\n\n    // Blindly hope that data structure loaded from YAML\n    // is valid for given type.\n    return objData;\n  }\n\n  setUpAPIEndpoints(notifier: (notify: string[]) => void) {\n    for (let indexName of Object.keys(this.workspace)) {\n\n      makeEndpoint<Index<any>>(`storage-${indexName}-all`, async () => {\n        return this.workspace[indexName];\n      }, async ({ newData, notify }) => {\n        await this.storeManagers[indexName].storeIndex(this, newData);\n        notifier([indexName, ...(notify || [])]);\n      });\n\n      makeEndpoint<IndexableObject>(`storage-${indexName}`, async ({ objectId }: { objectId: string }) => {\n        return this.workspace[indexName][objectId];\n      }, async ({ newData, notify }) => {\n        await this.storeManagers[indexName].store(newData, this);\n        notifier([indexName, ...(notify || [])]);\n      });\n\n      makeEndpoint<boolean>(`storage-${indexName}-delete`, async ({ objectId }: { objectId: string }) => {\n        delete this.workspace[indexName][objectId];\n        await this.storeManagers[indexName].storeIndex(this, this.workspace[indexName]);\n        return true;\n      });\n\n    }\n  }\n}\n"]}