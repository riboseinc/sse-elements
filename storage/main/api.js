import { listen } from '../../api/main';
import { notifyAllWindows } from '../../main/window';
export function provideAll(storage, contentTypeName) {
    return listen(`storage-read-all-${contentTypeName}`, async () => {
        return await storage[contentTypeName].getIndex();
    });
}
export function provideOne(storage, contentTypeName) {
    return listen(`storage-read-one-in-${contentTypeName}`, async ({ objectId }) => {
        return await storage[contentTypeName].read(objectId);
    });
}
// Below can only be called if mainStorage[ctypename]
// is a VersionedStore that implements listUncommitted(), commit(), discard() methods.
export function provideModified(storage, contentTypeName) {
    return listen(`storage-read-modified-in-${contentTypeName}`, async () => {
        const store = storage[contentTypeName];
        if (store.listUncommitted) {
            return await store.listUncommitted();
        }
        else {
            throw new Error("Store does not support listUncommitted()");
        }
    });
}
export function listenToBatchCommits(storage, contentTypeName) {
    return listen(`storage-commit-objects-in-${contentTypeName}`, async ({ objIds, commitMsg }) => {
        const store = storage[contentTypeName];
        if (store.commit) {
            await store.commit(objIds, commitMsg);
        }
        else {
            throw new Error("Store does not support commit()");
        }
        return { success: true };
    });
}
export function listenToBatchDiscardRequests(storage, contentTypeName) {
    return listen(`storage-discard-uncommitted-changes-for-objects-in-${contentTypeName}`, async ({ objIds }) => {
        const store = storage[contentTypeName];
        if (store.discard) {
            await store.discard(objIds);
        }
        else {
            throw new Error("Store does not support discard()");
        }
        await notifyAllWindows(`${contentTypeName}-changed`, { objIds });
        return { success: true };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3JhZ2UvbWFpbi9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBT3JELE1BQU0sVUFBVSxVQUFVLENBQ3pCLE9BQXVCLEVBQUUsZUFBMEI7SUFDbEQsT0FBTyxNQUFNLENBQ1osb0JBQW9CLGVBQWUsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pELE9BQU8sTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBR0QsTUFBTSxVQUFVLFVBQVUsQ0FDekIsT0FBdUIsRUFBRSxlQUEwQjtJQUNsRCxPQUFPLE1BQU0sQ0FDWix1QkFBdUIsZUFBZSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtRQUNoRSxPQUFPLE1BQU0sT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFHRCxxREFBcUQ7QUFDckQsc0ZBQXNGO0FBRXRGLE1BQU0sVUFBVSxlQUFlLENBQzlCLE9BQTJFLEVBQUUsZUFBMEI7SUFDdEcsT0FBTyxNQUFNLENBQ1osNEJBQTRCLGVBQWUsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQWlELENBQUM7UUFDdkYsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE9BQU8sTUFBTSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDdEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM3RDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUdELE1BQU0sVUFBVSxvQkFBb0IsQ0FDbkMsT0FBMkUsRUFBRSxlQUEwQjtJQUN0RyxPQUFPLE1BQU0sQ0FDWiw2QkFBNkIsZUFBZSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7UUFDL0UsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBaUQsQ0FBQztRQUN2RixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDaEIsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFHRCxNQUFNLFVBQVUsNEJBQTRCLENBQzNDLE9BQTJFLEVBQUUsZUFBMEI7SUFDdEcsT0FBTyxNQUFNLENBQ1osc0RBQXNELGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDN0YsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBaUQsQ0FBQztRQUN2RixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDakIsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDckQ7UUFDRCxNQUFNLGdCQUFnQixDQUFDLEdBQUcsZUFBZSxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbGlzdGVuIH0gZnJvbSAnLi4vLi4vYXBpL21haW4nO1xuaW1wb3J0IHsgbm90aWZ5QWxsV2luZG93cyB9IGZyb20gJy4uLy4uL21haW4vd2luZG93JztcbmltcG9ydCB7IEluZGV4LCBBbnlJRFR5cGUgfSBmcm9tICcuLi9xdWVyeSc7XG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgTWFpblN0b3JhZ2UgfSBmcm9tICcuJztcbmltcG9ydCB7IFZlcnNpb25lZFN0b3JlIH0gZnJvbSAnLi9zdG9yZS9iYXNlJztcblxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUFsbDxDVHlwZU5hbWUgZXh0ZW5kcyBrZXlvZiBTLCBTIGV4dGVuZHMgU3RvcmFnZT5cbihzdG9yYWdlOiBNYWluU3RvcmFnZTxTPiwgY29udGVudFR5cGVOYW1lOiBDVHlwZU5hbWUpIHtcbiAgcmV0dXJuIGxpc3Rlbjx7fSwgSW5kZXg8U1tDVHlwZU5hbWVdPj5cbiAgKGBzdG9yYWdlLXJlYWQtYWxsLSR7Y29udGVudFR5cGVOYW1lfWAsIGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXdhaXQgc3RvcmFnZVtjb250ZW50VHlwZU5hbWVdLmdldEluZGV4KCk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlT25lPENUeXBlTmFtZSBleHRlbmRzIGtleW9mIFMsIFMgZXh0ZW5kcyBTdG9yYWdlPlxuKHN0b3JhZ2U6IE1haW5TdG9yYWdlPFM+LCBjb250ZW50VHlwZU5hbWU6IENUeXBlTmFtZSkge1xuICByZXR1cm4gbGlzdGVuPHsgb2JqZWN0SWQ6IEFueUlEVHlwZSB9LCBJbmRleDxTW0NUeXBlTmFtZV0+PlxuICAoYHN0b3JhZ2UtcmVhZC1vbmUtaW4tJHtjb250ZW50VHlwZU5hbWV9YCwgYXN5bmMgKHsgb2JqZWN0SWQgfSkgPT4ge1xuICAgIHJldHVybiBhd2FpdCBzdG9yYWdlW2NvbnRlbnRUeXBlTmFtZV0ucmVhZChvYmplY3RJZCk7XG4gIH0pO1xufVxuXG5cbi8vIEJlbG93IGNhbiBvbmx5IGJlIGNhbGxlZCBpZiBtYWluU3RvcmFnZVtjdHlwZW5hbWVdXG4vLyBpcyBhIFZlcnNpb25lZFN0b3JlIHRoYXQgaW1wbGVtZW50cyBsaXN0VW5jb21taXR0ZWQoKSwgY29tbWl0KCksIGRpc2NhcmQoKSBtZXRob2RzLlxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZU1vZGlmaWVkPENUeXBlTmFtZSBleHRlbmRzIGtleW9mIFMsIE0gZXh0ZW5kcyBNYWluU3RvcmFnZTxTPiwgUyBleHRlbmRzIFN0b3JhZ2U+XG4oc3RvcmFnZTogTVtDVHlwZU5hbWVdIGV4dGVuZHMgVmVyc2lvbmVkU3RvcmU8U1tDVHlwZU5hbWVdLCBhbnk+ID8gTSA6IG5ldmVyLCBjb250ZW50VHlwZU5hbWU6IENUeXBlTmFtZSkge1xuICByZXR1cm4gbGlzdGVuPHt9LCBBbnlJRFR5cGVbXT5cbiAgKGBzdG9yYWdlLXJlYWQtbW9kaWZpZWQtaW4tJHtjb250ZW50VHlwZU5hbWV9YCwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmFnZVtjb250ZW50VHlwZU5hbWVdIGFzIHVua25vd24gYXMgVmVyc2lvbmVkU3RvcmU8U1tDVHlwZU5hbWVdLCBhbnk+O1xuICAgIGlmIChzdG9yZS5saXN0VW5jb21taXR0ZWQpIHtcbiAgICAgIHJldHVybiBhd2FpdCBzdG9yZS5saXN0VW5jb21taXR0ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RvcmUgZG9lcyBub3Qgc3VwcG9ydCBsaXN0VW5jb21taXR0ZWQoKVwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW5Ub0JhdGNoQ29tbWl0czxDVHlwZU5hbWUgZXh0ZW5kcyBrZXlvZiBTLCBNIGV4dGVuZHMgTWFpblN0b3JhZ2U8Uz4sIFMgZXh0ZW5kcyBTdG9yYWdlPlxuKHN0b3JhZ2U6IE1bQ1R5cGVOYW1lXSBleHRlbmRzIFZlcnNpb25lZFN0b3JlPFNbQ1R5cGVOYW1lXSwgYW55PiA/IE0gOiBuZXZlciwgY29udGVudFR5cGVOYW1lOiBDVHlwZU5hbWUpIHtcbiAgcmV0dXJuIGxpc3Rlbjx7IG9iaklkczogQW55SURUeXBlW10sIGNvbW1pdE1zZzogc3RyaW5nIH0sIHsgc3VjY2VzczogdHJ1ZSB9PlxuICAoYHN0b3JhZ2UtY29tbWl0LW9iamVjdHMtaW4tJHtjb250ZW50VHlwZU5hbWV9YCwgYXN5bmMgKHsgb2JqSWRzLCBjb21taXRNc2cgfSkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmFnZVtjb250ZW50VHlwZU5hbWVdIGFzIHVua25vd24gYXMgVmVyc2lvbmVkU3RvcmU8U1tDVHlwZU5hbWVdLCBhbnk+O1xuICAgIGlmIChzdG9yZS5jb21taXQpIHtcbiAgICAgIGF3YWl0IHN0b3JlLmNvbW1pdChvYmpJZHMsIGNvbW1pdE1zZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0b3JlIGRvZXMgbm90IHN1cHBvcnQgY29tbWl0KClcIik7XG4gICAgfVxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlblRvQmF0Y2hEaXNjYXJkUmVxdWVzdHM8Q1R5cGVOYW1lIGV4dGVuZHMga2V5b2YgUywgTSBleHRlbmRzIE1haW5TdG9yYWdlPFM+LCBTIGV4dGVuZHMgU3RvcmFnZT5cbihzdG9yYWdlOiBNW0NUeXBlTmFtZV0gZXh0ZW5kcyBWZXJzaW9uZWRTdG9yZTxTW0NUeXBlTmFtZV0sIGFueT4gPyBNIDogbmV2ZXIsIGNvbnRlbnRUeXBlTmFtZTogQ1R5cGVOYW1lKSB7XG4gIHJldHVybiBsaXN0ZW48eyBvYmpJZHM6IEFueUlEVHlwZVtdIH0sIHsgc3VjY2VzczogdHJ1ZSB9PlxuICAoYHN0b3JhZ2UtZGlzY2FyZC11bmNvbW1pdHRlZC1jaGFuZ2VzLWZvci1vYmplY3RzLWluLSR7Y29udGVudFR5cGVOYW1lfWAsIGFzeW5jICh7IG9iaklkcyB9KSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yYWdlW2NvbnRlbnRUeXBlTmFtZV0gYXMgdW5rbm93biBhcyBWZXJzaW9uZWRTdG9yZTxTW0NUeXBlTmFtZV0sIGFueT47XG4gICAgaWYgKHN0b3JlLmRpc2NhcmQpIHtcbiAgICAgIGF3YWl0IHN0b3JlLmRpc2NhcmQob2JqSWRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RvcmUgZG9lcyBub3Qgc3VwcG9ydCBkaXNjYXJkKClcIik7XG4gICAgfVxuICAgIGF3YWl0IG5vdGlmeUFsbFdpbmRvd3MoYCR7Y29udGVudFR5cGVOYW1lfS1jaGFuZ2VkYCwgeyBvYmpJZHMgfSk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICB9KTtcbn1cbiJdfQ==