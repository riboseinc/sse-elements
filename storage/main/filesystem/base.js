import * as fs from 'fs-extra';
import * as path from 'path';
import AsyncLock from 'async-lock';
export class AbstractLockingFilesystemBackend {
    constructor(baseDir) {
        this.baseDir = baseDir;
        this.fileAccessLock = new AsyncLock();
    }
    expandPath(objId) {
        return path.join(this.baseDir, objId);
    }
    makeRelativePath(absPath) {
        if (path.isAbsolute(absPath)) {
            return path.relative(this.baseDir, absPath);
        }
        else {
            throw new Error("Expecting an absolute path, but got relative");
        }
    }
    async isValidId(value) {
        return true;
    }
    async resolveObjectId(filepath) {
        const objId = filepath.split(path.sep)[0];
        if (!objId || !(await this.isValidId(objId))) {
            throw new Error(`Unable to resolve object ID for path ${filepath}`);
        }
        return objId;
    }
    async readAll() {
        const objIds = await fs.readdir(this.baseDir);
        var objs = [];
        for (const objId of objIds) {
            if (await this.isValidId(objId)) {
                objs.push(await this.read(objId));
            }
        }
        return objs;
    }
    async exists(objId) {
        return await fs.pathExists(this.expandPath(objId));
    }
    async read(objId) {
        const filePath = this.expandPath(objId);
        return await this.fileAccessLock.acquire(filePath, async () => {
            return this.parseData(await fs.readFile(filePath, { encoding: 'utf8' }));
        });
    }
    async write(objId, newContents) {
        const filePath = this.expandPath(objId);
        return await this.fileAccessLock.acquire(filePath, async () => {
            if (newContents !== undefined) {
                await fs.writeFile(filePath, this.dumpData(newContents), { encoding: 'utf8' });
            }
            else {
                await fs.remove(filePath);
            }
            return [this.makeRelativePath(filePath)];
        });
    }
}
//# sourceMappingURL=data:application/json;base64,