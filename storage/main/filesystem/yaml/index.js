import * as path from 'path';
import * as fs from 'fs-extra';
import * as yaml from 'js-yaml';
import { Schema } from './schema';
import { AbstractLockingFilesystemBackend } from '../base';
const YAML_EXT = '.yaml';
class YAMLBackend extends AbstractLockingFilesystemBackend {
    isYAMLFile(objId) {
        return path.extname(objId) === YAML_EXT;
    }
    async isValidId(objId) {
        return this.isYAMLFile(objId);
    }
    async resolveObjectId(objId) {
        // Drop YAML extension from resolved path fragment.
        const idWithExt = await super.resolveObjectId(objId);
        return path.basename(idWithExt, YAML_EXT);
    }
    expandPath(objId) {
        // In this case, path to object should include YAML extension.
        return `${super.expandPath(objId)}${YAML_EXT}`;
    }
    parseData(data) {
        return yaml.load(data, { schema: Schema });
    }
    dumpData(data) {
        if (data !== undefined && data !== null) {
            return yaml.dump(data, {
                schema: Schema,
                noRefs: true,
                noCompatMode: true,
            });
        }
        else {
            throw new Error("Attempt to write invalid data (null or undefined)");
        }
    }
}
;
export class YAMLDirectoryBackend extends YAMLBackend {
    constructor(baseDir, metaProperties) {
        super(baseDir);
        this.metaProperties = metaProperties;
    }
    expandDirectoryPath(objId) {
        return path.join(this.baseDir, objId);
    }
    async exists(objId) {
        const dirPath = this.expandDirectoryPath(objId);
        if (await fs.pathExists(dirPath)) {
            const stat = await fs.stat(dirPath);
            if (!stat.isDirectory()) {
                throw new Error("File is expected to be a directory");
            }
            return true;
        }
        return false;
    }
    async isValidId(value) {
        const metaFile = path.join(this.expandDirectoryPath(value), `meta${YAML_EXT}`);
        let metaFileIsFile;
        try {
            metaFileIsFile = (await fs.stat(metaFile)).isFile();
        }
        catch (e) {
            return false;
        }
        if (!metaFileIsFile) {
            return false;
        }
        return metaFileIsFile;
    }
    async read(objId) {
        const objAbsPath = this.expandDirectoryPath(objId);
        const metaId = 'meta';
        const metaAbsPath = path.join(objAbsPath, `${metaId}${YAML_EXT}`);
        let metaFileIsFile;
        try {
            metaFileIsFile = (await fs.stat(metaAbsPath)).isFile();
        }
        catch (e) {
            throw new Error(`Exception accessing meta file for ${objId}: ${metaAbsPath}: ${e.toString()} ${e.stack}`);
        }
        if (!metaFileIsFile) {
            throw new Error(`Meta file for ${objId} is not a file: ${metaAbsPath}`);
        }
        var objData = {};
        const metaPath = path.join(objId, metaId);
        const meta = await super.read(metaPath) || {};
        for (const key of this.metaProperties) {
            objData[key] = meta[key];
        }
        const dirContents = await fs.readdir(objAbsPath);
        for (const filename of dirContents) {
            if (this.isYAMLFile(filename)) {
                const fieldName = path.basename(filename, YAML_EXT);
                if (fieldName != 'meta') {
                    objData[fieldName] = await super.read(path.join(objId, fieldName));
                }
            }
        }
        // Blindly hope that data structure loaded from YAML
        // is valid for given type.
        return objData;
    }
    async write(objId, newData) {
        const objPath = this.expandDirectoryPath(objId);
        await fs.ensureDir(objPath);
        var dataToStore = { meta: {} };
        var modifiedPaths = [];
        for (const key of Object.keys(newData)) {
            if (this.metaProperties.indexOf(key) >= 0) {
                dataToStore.meta[key] = newData[key];
            }
            else {
                dataToStore[key] = newData[key];
            }
        }
        for (const [fieldName, fieldValue] of Object.entries(dataToStore)) {
            modifiedPaths = [
                ...modifiedPaths,
                ...(await super.write(path.join(objId, fieldName), fieldValue)),
            ];
        }
        return modifiedPaths;
    }
}
//# sourceMappingURL=data:application/json;base64,