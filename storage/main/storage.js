import * as path from 'path';
import * as log from 'electron-log';
import { listen } from '../../api/main';
import { YAMLStorage } from './yaml';
const YAML_EXT = '.yaml';
export class StoreManager {
    constructor(rootDir) {
        this.rootDir = rootDir;
        this._index = undefined;
    }
    async storeIndex(storage, newIdx) {
        log.debug(`SSE: StorageManager for ${this.rootDir}: Storing index`);
        const idx = newIdx || await this.getIndex(storage);
        const items = Object.values(idx);
        for (const obj of items) {
            await this.store(obj, storage, false);
        }
        this._index = idx;
        return true;
    }
    async getIndex(storage) {
        if (this._index === undefined) {
            this._index = await this._loadIndex(storage);
        }
        return this._index;
    }
    async findObjects(storage, query) {
        const index = await this.getIndex(storage);
        if (query !== undefined) {
            var results = {};
            for (let key of Object.keys(index)) {
                const obj = index[key];
                if (this.objectMatchesQuery(obj, query)) {
                    results[key] = obj;
                }
            }
            return results;
        }
        else {
            return index;
        }
    }
    async _loadIndex(storage) {
        const rootPath = this.rootDir;
        const dirs = await storage.fs.readdir(path.join(storage.workDir, rootPath));
        var idx = {};
        for (const dir of dirs) {
            if (dir != '.DS_Store') {
                let objData;
                try {
                    objData = await storage.loadObject(path.join(rootPath, dir));
                }
                catch (e) {
                    log.error(`Failed to load object from ${dir} when loading index ${this.rootDir}`);
                }
                if (objData) {
                    const obj = this.postLoad(objData);
                    if (obj.id) {
                        idx[obj.id] = obj;
                    }
                }
            }
        }
        return idx;
    }
    // TODO: Use `toUseableObject(data: any) => O` to post-process loaded data
    // Stores object in DB
    async store(obj, storage, updateIndex = true) {
        //log.debug(`SSE: StorageManager for ${this.rootDir}: Storing object ${obj.id}`);
        //log.silly(`SSE: StorageManager for ${this.rootDir}: Storing object ${obj.id}: ${JSON.stringify(obj)}`);
        const objDir = path.join(this.rootDir, `${obj.id}`);
        const objPath = path.join(storage.workDir, objDir);
        const storeable = this.toStoreableObject(obj);
        await storage.fs.ensureDir(objPath);
        for (const key of Object.keys(storeable)) {
            const data = storeable[key];
            await storage.yaml.store(path.join(objPath, `${key}.yaml`), data);
        }
        if (updateIndex === true) {
            //log.debug(`SSE: StorageManager for ${this.rootDir}: Storing object ${obj.id}: Updating index`);
            await this.updateIndexedItem(obj, storage);
        }
        return true;
    }
    async updateIndexedItem(obj, storage) {
        await this.getIndex(storage);
        this._index[obj.id] = obj;
    }
    toStoreableObject(obj) {
        return { meta: obj };
    }
    ;
    // Converts object data into valid object, if needed
    // (in cases when partial data is stored or migration took place previously)
    postLoad(obj) {
        return obj;
    }
    objectMatchesQuery(obj, query) {
        return false;
    }
}
export class Storage {
    constructor(fs, workDir, storeManagers, debugBackend) {
        this.fs = fs;
        this.workDir = workDir;
        this.storeManagers = storeManagers;
        this.fs = fs;
        this.workDir = workDir;
        this.yaml = new YAMLStorage(fs, { debugLog: debugBackend || false });
        this.workspace = Object.keys(storeManagers).reduce((obj, key) => {
            obj[key] = {};
            return obj;
        }, {});
    }
    async loadWorkspace() {
        // Loads workspace object with an index for each store manager
        this.workspace = await Object.keys(this.storeManagers).reduce(async (objP, key) => {
            const obj = await objP;
            obj[key] = await this.storeManagers[key].getIndex(this);
            return obj;
        }, Promise.resolve({}));
    }
    async storeWorkspace() {
        return Promise.all([...Object.keys(this.storeManagers).map(async (key) => {
                return await this.storeManagers[key].storeIndex(this, this.workspace[key]);
            })]).then(() => true);
    }
    // Loads object data from given directory, reading YAML files.
    // meta.yaml is treated specially, populating top-level object payload.
    // Other YAML files populate corresponding object properties.
    async loadObject(objDir) {
        let objData;
        const metaFile = path.join(this.workDir, objDir, 'meta.yaml');
        let metaFileIsFile;
        try {
            metaFileIsFile = (await this.fs.stat(metaFile)).isFile();
        }
        catch (e) {
            return undefined;
        }
        if (!metaFileIsFile) {
            return undefined;
        }
        objData = await this.yaml.load(metaFile) || {};
        const dirContents = await this.fs.readdir(path.join(this.workDir, objDir));
        for (const item of dirContents) {
            if (path.extname(item) == YAML_EXT) {
                const basename = path.basename(item, YAML_EXT);
                if (basename != 'meta') {
                    objData[basename] = await this.yaml.load(path.join(this.workDir, objDir, item));
                }
            }
        }
        // Blindly hope that data structure loaded from YAML
        // is valid for given type.
        return objData;
    }
    setUpAPIEndpoints(notifier) {
        log.verbose("SSE: Storage: Setting API endpoints");
        for (let indexName of Object.keys(this.workspace)) {
            listen(`storage-get-all-${indexName}`, async () => {
                return this.workspace[indexName];
            });
            listen(`storage-get-one-in-${indexName}`, async ({ objectId }) => {
                return this.workspace[indexName][objectId] || null;
            });
            listen(`storage-store-one-in-${indexName}`, async ({ objectId, newData }) => {
                await this.storeManagers[indexName].store(newData, this);
                notifier([indexName]);
                return { success: true };
            });
            listen(`storage-delete-one-in-${indexName}`, async ({ objectId }) => {
                delete this.workspace[indexName][objectId];
                // TODO: WARNING: Race condition, since storing the whole index may take a little while
                await this.storeManagers[indexName].storeIndex(this, this.workspace[indexName]);
                notifier([indexName]);
                return { success: true };
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,