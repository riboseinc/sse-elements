import * as path from 'path';
import * as log from 'electron-log';
import { listen } from '../../api/main';
import { YAMLStorage } from './yaml';
const YAML_EXT = '.yaml';
export class StoreManager {
    constructor(rootDir) {
        this.rootDir = rootDir;
        this._index = undefined;
    }
    /* Intended to be overridden */
    // Converts object into data valid for storage
    toStoreableObject(obj) {
        return { meta: obj };
    }
    ;
    // Converts raw loaded data into valid object
    toUseableObject(data) {
        return data;
    }
    objectMatchesQuery(obj, query) {
        return false;
    }
    formatObjectNameForCommitMessage(obj) {
        return `${path.basename(this.rootDir)}#${obj.id}`;
    }
    /* Can be called from outside */
    async getIndex(storage, force = false) {
        if (this._index === undefined || force === true) {
            this._index = await this._loadIndex(storage);
        }
        return this._index;
    }
    async findObjects(storage, query) {
        const index = await this.getIndex(storage);
        if (query !== undefined) {
            var results = {};
            for (let key of Object.keys(index)) {
                const obj = index[key];
                if (this.objectMatchesQuery(obj, query)) {
                    results[key] = obj;
                }
            }
            return results;
        }
        else {
            return index;
        }
    }
    // Loads object data from given directory, reading YAML files.
    // meta.yaml is treated specially, populating top-level object payload.
    // Other YAML files populate corresponding object properties.
    async load(objDir, storage) {
        const objPath = path.join(storage.workDir, objDir);
        const metaFile = path.join(objPath, 'meta.yaml');
        let metaFileIsFile;
        try {
            metaFileIsFile = (await storage.fs.stat(metaFile)).isFile();
        }
        catch (e) {
            return undefined;
        }
        if (!metaFileIsFile) {
            return undefined;
        }
        var objData = await storage.yaml.load(metaFile) || {};
        const dirContents = await storage.fs.readdir(objPath);
        for (const item of dirContents) {
            if (path.extname(item) == YAML_EXT) {
                const basename = path.basename(item, YAML_EXT);
                if (basename != 'meta') {
                    objData[basename] = await storage.yaml.load(path.join(objPath, item));
                }
            }
        }
        // Blindly hope that data structure loaded from YAML
        // is valid for given type.
        return objData;
    }
    async store(obj, storage, updateIndex = true) {
        //log.debug(`SSE: StorageManager for ${this.rootDir}: Storing object ${obj.id}`);
        //log.silly(`SSE: StorageManager for ${this.rootDir}: Storing object ${obj.id}: ${JSON.stringify(obj)}`);
        const objPath = this.resolveObjectPath(`${obj.id}`, storage);
        const storeable = this.toStoreableObject(obj);
        await storage.fs.ensureDir(objPath);
        for (const key of Object.keys(storeable)) {
            const data = storeable[key];
            await storage.yaml.store(path.join(objPath, `${key}.yaml`), data);
        }
        if (updateIndex === true) {
            await this.updateInIndex(obj, storage);
        }
        return true;
    }
    async delete(objId, storage, updateIndex = true) {
        const objPath = this.resolveObjectPath(objId, storage);
        log.info(`Deleting path with subdirectories: ${objPath}`);
        await storage.fs.remove(objPath);
        if (updateIndex === true) {
            await this.deleteFromIndex(objId, storage);
        }
        return true;
    }
    /* Private */
    resolveObjectPath(objId, storage) {
        const objDir = path.join(this.rootDir, objId);
        return path.join(storage.workDir, objDir);
    }
    async updateInIndex(obj, storage) {
        await this.getIndex(storage);
        this._index[obj.id] = obj;
    }
    async deleteFromIndex(objId, storage) {
        await this.getIndex(storage);
        delete this._index[objId];
    }
    async _loadIndex(storage) {
        const rootPath = this.rootDir;
        const dirs = await storage.fs.readdir(path.join(storage.workDir, rootPath));
        var idx = {};
        for (const dir of dirs) {
            if (dir != '.DS_Store') {
                let objData;
                try {
                    objData = await this.load(path.join(rootPath, dir), storage);
                }
                catch (e) {
                    log.error(`Failed to load object from ${dir} when loading index ${this.rootDir}`);
                }
                if (objData) {
                    const obj = this.toUseableObject(objData);
                    if (obj.id) {
                        idx[`${obj.id}`] = obj;
                    }
                }
            }
        }
        return idx;
    }
}
export class Storage {
    constructor(fs, workDir, storeManagers, debugBackend) {
        this.fs = fs;
        this.workDir = workDir;
        this.storeManagers = storeManagers;
        this.fs = fs;
        this.workDir = workDir;
        this.yaml = new YAMLStorage(fs, { debugLog: debugBackend || false });
        this.workspace = Object.keys(storeManagers).
            reduce((ws, indexName) => {
            ws[indexName] = {};
            return ws;
        }, {});
    }
    async loadWorkspace(force = false) {
        // Loads workspace object with an index for each store manager.
        // To force store manager to re-read index from filesystem, pass force = true.
        this.workspace = await Object.keys(this.storeManagers).
            reduce(async (wsP, indexName) => {
            const ws = await wsP;
            ws[indexName] = await this.storeManagers[indexName].getIndex(this, force);
            return ws;
        }, Promise.resolve({}));
    }
    setUpAPIEndpoints(notifier) {
        log.verbose("SSE: Storage: Setting API endpoints");
        for (let indexName of Object.keys(this.workspace)) {
            listen(`storage-read-all-in-${indexName}`, async () => {
                return this.workspace[indexName];
            });
            listen(`storage-create-one-in-${indexName}`, async ({ objectId, newData }) => {
                await this.storeManagers[indexName].store(newData, this);
                notifier([indexName]);
                return { success: true };
            });
            listen(`storage-read-one-in-${indexName}`, async ({ objectId }) => {
                return this.workspace[indexName][objectId] || undefined;
            });
            listen(`storage-update-one-in-${indexName}`, async ({ objectId, newData }) => {
                await this.storeManagers[indexName].store(newData, this);
                notifier([indexName]);
                return { success: true };
            });
            listen(`storage-delete-one-in-${indexName}`, async ({ objectId }) => {
                await this.storeManagers[indexName].delete(objectId, this);
                notifier([indexName]);
                return { success: true };
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,