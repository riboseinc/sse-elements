import { URL } from 'url';
import { remote } from 'electron';
import React from 'react';
import { FormGroup, InputGroup, Button } from '@blueprintjs/core';
import { useSetting } from '../../settings/renderer';
export const RepositoryConfigurator = function ({ defaultUrl, className }) {
    const url = useSetting('gitRepoUrl', defaultUrl);
    async function handleSaveAction() {
        await url.commit();
        remote.getCurrentWindow().hide();
    }
    let urlIsValid;
    try {
        new URL(url.value);
        urlIsValid = true;
    }
    catch (e) {
        urlIsValid = false;
    }
    const usingUpstream = url.value.trim() === defaultUrl.trim();
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: className },
            React.createElement(FormGroup, { key: "url", label: "Repository URL", helperText: "Please enter a valid URL of the repository you have commit access to, or leave empty to use upstream.", intent: urlIsValid ? "primary" : "danger" },
                React.createElement(InputGroup, { value: url.value, key: "username", large: true, type: "url", placeholder: defaultUrl, onChange: (evt) => {
                        url.set(evt.target.value);
                    } })),
            React.createElement(Button, { className: "confirm-button", key: "confirm", intent: !usingUpstream ? "primary" : "warning", large: true, disabled: urlIsValid !== true, onClick: handleSaveAction }, !usingUpstream ? "Launch with this repository URL" : "Launch with upstream repository"))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS1jb25maWd1cmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmFnZS9yZW5kZXJlci9yZXBvc2l0b3J5LWNvbmZpZ3VyYXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUMxQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFPckQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTBDLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlHLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBUyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFekQsS0FBSyxVQUFVLGdCQUFnQjtRQUM3QixNQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuQixNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxVQUFtQixDQUFDO0lBQ3hCLElBQUk7UUFDRixJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsVUFBVSxHQUFHLElBQUksQ0FBQztLQUNuQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUNwQjtJQUVELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTdELE9BQU8sQ0FDTDtRQUNFLDZCQUFLLFNBQVMsRUFBRSxTQUFTO1lBQ3ZCLG9CQUFDLFNBQVMsSUFDTixHQUFHLEVBQUMsS0FBSyxFQUNULEtBQUssRUFBQyxnQkFBZ0IsRUFDdEIsVUFBVSxFQUFDLHVHQUF1RyxFQUNsSCxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVE7Z0JBQzNDLG9CQUFDLFVBQVUsSUFDVCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFDaEIsR0FBRyxFQUFDLFVBQVUsRUFDZCxLQUFLLEVBQUUsSUFBSSxFQUNYLElBQUksRUFBQyxLQUFLLEVBQ1YsV0FBVyxFQUFFLFVBQVUsRUFDdkIsUUFBUSxFQUFFLENBQUMsR0FBaUMsRUFBRSxFQUFFO3dCQUM5QyxHQUFHLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxNQUEyQixDQUFDLEtBQWUsQ0FBQyxDQUFDO29CQUM1RCxDQUFDLEdBQ0QsQ0FDUTtZQUVaLG9CQUFDLE1BQU0sSUFDSCxTQUFTLEVBQUMsZ0JBQWdCLEVBQzFCLEdBQUcsRUFBQyxTQUFTLEVBQ2IsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDOUMsS0FBSyxFQUFFLElBQUksRUFDWCxRQUFRLEVBQUUsVUFBVSxLQUFLLElBQUksRUFDN0IsT0FBTyxFQUFFLGdCQUFnQixJQUMxQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLGlDQUFpQyxDQUNoRixDQUNMLENBQ0wsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIElucHV0R3JvdXAsIEJ1dHRvbiB9IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcbmltcG9ydCB7IHVzZVNldHRpbmcgfSBmcm9tICcuLi8uLi9zZXR0aW5ncy9yZW5kZXJlcic7XG5cblxuaW50ZXJmYWNlIFJlcG9zaXRvcnlDb25maWd1cmF0b3JQcm9wcyB7XG4gIGRlZmF1bHRVcmw6IHN0cmluZztcbiAgY2xhc3NOYW1lOiBzdHJpbmc7XG59XG5leHBvcnQgY29uc3QgUmVwb3NpdG9yeUNvbmZpZ3VyYXRvcjogUmVhY3QuRkM8UmVwb3NpdG9yeUNvbmZpZ3VyYXRvclByb3BzPiA9IGZ1bmN0aW9uICh7IGRlZmF1bHRVcmwsIGNsYXNzTmFtZSB9KSB7XG4gIGNvbnN0IHVybCA9IHVzZVNldHRpbmc8c3RyaW5nPignZ2l0UmVwb1VybCcsIGRlZmF1bHRVcmwpO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNhdmVBY3Rpb24oKSB7XG4gICAgYXdhaXQgdXJsLmNvbW1pdCgpO1xuICAgIHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkuaGlkZSgpO1xuICB9XG5cbiAgbGV0IHVybElzVmFsaWQ6IGJvb2xlYW47XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh1cmwudmFsdWUpO1xuICAgIHVybElzVmFsaWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdXJsSXNWYWxpZCA9IGZhbHNlO1xuICB9XG5cbiAgY29uc3QgdXNpbmdVcHN0cmVhbSA9IHVybC52YWx1ZS50cmltKCkgPT09IGRlZmF1bHRVcmwudHJpbSgpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICA8Rm9ybUdyb3VwXG4gICAgICAgICAgICBrZXk9XCJ1cmxcIlxuICAgICAgICAgICAgbGFiZWw9XCJSZXBvc2l0b3J5IFVSTFwiXG4gICAgICAgICAgICBoZWxwZXJUZXh0PVwiUGxlYXNlIGVudGVyIGEgdmFsaWQgVVJMIG9mIHRoZSByZXBvc2l0b3J5IHlvdSBoYXZlIGNvbW1pdCBhY2Nlc3MgdG8sIG9yIGxlYXZlIGVtcHR5IHRvIHVzZSB1cHN0cmVhbS5cIlxuICAgICAgICAgICAgaW50ZW50PXt1cmxJc1ZhbGlkID8gXCJwcmltYXJ5XCIgOiBcImRhbmdlclwifT5cbiAgICAgICAgICA8SW5wdXRHcm91cFxuICAgICAgICAgICAgdmFsdWU9e3VybC52YWx1ZX1cbiAgICAgICAgICAgIGtleT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgIGxhcmdlPXt0cnVlfVxuICAgICAgICAgICAgdHlwZT1cInVybFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17ZGVmYXVsdFVybH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZ0OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgICAgICAgIHVybC5zZXQoKGV2dC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29uZmlybS1idXR0b25cIlxuICAgICAgICAgICAga2V5PVwiY29uZmlybVwiXG4gICAgICAgICAgICBpbnRlbnQ9eyF1c2luZ1Vwc3RyZWFtID8gXCJwcmltYXJ5XCIgOiBcIndhcm5pbmdcIn1cbiAgICAgICAgICAgIGxhcmdlPXt0cnVlfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3VybElzVmFsaWQgIT09IHRydWV9XG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTYXZlQWN0aW9ufT5cbiAgICAgICAgICB7IXVzaW5nVXBzdHJlYW0gPyBcIkxhdW5jaCB3aXRoIHRoaXMgcmVwb3NpdG9yeSBVUkxcIiA6IFwiTGF1bmNoIHdpdGggdXBzdHJlYW0gcmVwb3NpdG9yeVwifVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcbiJdfQ==