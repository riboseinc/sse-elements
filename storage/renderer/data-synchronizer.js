import { remote, ipcRenderer } from 'electron';
import { clipboard } from 'electron';
import React, { useEffect, useState } from 'react';
import { H4, Card, Label, InputGroup, FormGroup, Callout, Button } from '@blueprintjs/core';
import { useSetting } from '../../settings/renderer';
import { request } from '../../api/renderer';
import styles from './data-synchronizer.scss';
export const DataSynchronizer = function ({ upstreamURL, inPreLaunchSetup }) {
    const [username, setUsername] = useState('');
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [repoCfg, updateRepoCfg] = useState({
        originURL: undefined,
        name: undefined,
        email: undefined,
        username: undefined,
    });
    const url = useSetting('gitRepoUrl', '');
    const usingUpstream = url.value && url.value.trim() === upstreamURL.trim();
    let urlIsValid;
    try {
        if (url.value) {
            new URL(url.value.trim());
            urlIsValid = true;
        }
        else {
            urlIsValid = false;
        }
    }
    catch (e) {
        urlIsValid = false;
    }
    useEffect(() => {
        fetchRepoConfig();
    }, []);
    useEffect(() => {
        if (name.trim() === '' && repoCfg.name) {
            setName(repoCfg.name);
        }
        if (email.trim() === '' && repoCfg.email) {
            setEmail(repoCfg.email);
        }
        if (username.trim() === '' && repoCfg.username) {
            setUsername(repoCfg.username);
        }
    }, [name, email, username, JSON.stringify(repoCfg)]);
    const complete = (urlIsValid &&
        name.trim() != '' &&
        email.trim() != '' &&
        username.trim() != '');
    async function handleSaveAndClose() {
        if (inPreLaunchSetup) {
            // Cannot modify URL unless in pre launch
            await url.commit();
        }
        await request('git-config-set', { name, email, username });
        closeWindow();
    }
    async function handleResetURL() {
        await ipcRenderer.send('clear-setting', 'gitRepoUrl');
        remote.app.relaunch();
        remote.app.exit(0);
    }
    async function copyUpstreamRepoURL() {
        clipboard.writeText(upstreamURL);
    }
    async function fetchRepoConfig() {
        const repoCfg = await request('git-config-get');
        updateRepoCfg(repoCfg);
    }
    function closeWindow() {
        remote.getCurrentWindow().close();
    }
    return (React.createElement("div", { className: styles.dataSyncBase },
        React.createElement(Card, { key: "repoUrl", className: styles.repoUrlCard },
            React.createElement(FormGroup, { label: "Repository URL", intent: inPreLaunchSetup && !urlIsValid ? "danger" : undefined, helperText: inPreLaunchSetup
                    ? React.createElement(Callout, { intent: "primary" },
                        React.createElement("p", null, "Please enter a valid URL of the repository you have commit access to, and which is a fork of the upstream repository."),
                        React.createElement("p", null,
                            React.createElement(Button, { onClick: copyUpstreamRepoURL }, "Copy upstream repository URL")))
                    : React.createElement(Callout, { intent: "warning" }, "Note: resetting the URL will cause you to lose any unsubmitted changes.") },
                React.createElement(InputGroup, { value: url.value, placeholder: upstreamURL, disabled: inPreLaunchSetup !== true, type: "text", onChange: inPreLaunchSetup
                        ? (evt) => {
                            url.set(evt.target.value);
                        }
                        : undefined, rightElement: inPreLaunchSetup
                        ? undefined
                        : React.createElement(Button, { intent: "danger", minimal: true, title: "Reset repository URL. Note: you will lose any unsubmitted changes.", onClick: handleResetURL }, "Reset URL") }))),
        React.createElement(Card, { key: "committerInfo", className: styles.committerInfoCard },
            React.createElement(H4, null, "Committing changes as"),
            React.createElement("div", { className: styles.dataSyncRow },
                React.createElement(Label, { key: "authorName" },
                    "Author name",
                    React.createElement(InputGroup, { value: name, type: "text", onChange: (evt) => {
                            setName(evt.target.value);
                        } })),
                React.createElement(Label, { key: "authorEmail" },
                    "Author email",
                    React.createElement(InputGroup, { value: email, type: "email", onChange: (evt) => {
                            setEmail(evt.target.value);
                        } })),
                React.createElement(Label, { key: "username" },
                    "Username",
                    React.createElement(InputGroup, { value: username, type: "text", onChange: (evt) => {
                            setUsername(evt.target.value);
                        } })))),
        React.createElement("footer", { key: "actionRow", className: styles.windowAction },
            React.createElement(Button, { className: "confirm-button", key: "confirm", large: true, fill: true, intent: !usingUpstream ? "primary" : "warning", disabled: complete !== true, onClick: handleSaveAndClose },
                "Save settings using ",
                !usingUpstream ? "upstream" : "fork",
                " repository",
                inPreLaunchSetup ? " and launch" : " and close"))));
};
//# sourceMappingURL=data:application/json;base64,