import { remote, ipcRenderer } from 'electron';
import React, { useEffect, useState } from 'react';
import { H4, Collapse, Card, Label, InputGroup, FormGroup, TextArea, Callout, UL, Button } from '@blueprintjs/core';
import { useWorkspaceRO } from '../../api/renderer';
import { useLocalStorage } from '../../renderer/useLocalStorage';
import styles from './data-synchronizer.scss';
const API_ENDPOINT = 'fetch-commit-push';
export const DataSynchronizer = function () {
    const [username, setUsername] = useLocalStorage('gitUsername', '');
    const [password, setPassword] = useLocalStorage('gitPassword', '');
    const [commitMsg, setCommitMsg] = useState('');
    const [authorName, setAuthorName] = useState('');
    const [authorEmail, setAuthorEmail] = useState('');
    const [repoConfigOpenState, updateRepoConfigOpenState] = useState(false);
    const [repoConfigComplete, updateRepoConfigComplete] = useState(false);
    const repoCfg = useWorkspaceRO('git-config', { originURL: undefined, author: {} });
    useEffect(() => {
        if (repoCfg.originURL !== undefined) {
            const _complete = (username.trim() !== '' &&
                password.trim() !== '' &&
                (repoCfg.originURL || '').trim() !== '');
            updateRepoConfigComplete(_complete);
            if (repoConfigOpenState === false && _complete === false) {
                updateRepoConfigOpenState(true);
            }
        }
    }, [username, password, repoCfg.originURL]);
    const [errors, setErrors] = useState([]);
    const [finished, setFinished] = useState(false);
    const [started, setStarted] = useState(false);
    if (authorName.trim() === '' && repoCfg.author.name !== undefined) {
        setAuthorName(repoCfg.author.name);
    }
    if (authorEmail.trim() === '' && repoCfg.author.email !== undefined) {
        setAuthorEmail(repoCfg.author.email);
    }
    function handleResult(evt, rawData) {
        ipcRenderer.removeListener(`workspace-${API_ENDPOINT}`, handleResult);
        const data = JSON.parse(rawData);
        setStarted(false);
        setFinished(true);
        setErrors(data.errors);
        if (data.errors.length < 1) {
            setCommitMsg('');
        }
    }
    function handleSyncAction() {
        updateRepoConfigOpenState(false);
        setErrors([]);
        ipcRenderer.on(`workspace-${API_ENDPOINT}`, handleResult);
        ipcRenderer.send(`request-workspace-${API_ENDPOINT}`, JSON.stringify({
            commitMsg,
            authorName,
            authorEmail,
            gitUsername: username,
            gitPassword: password,
        }));
        setFinished(false);
        setStarted(true);
    }
    async function handleResetURL() {
        await ipcRenderer.send('clear-setting', 'gitRepoUrl');
        remote.app.relaunch();
        remote.app.quit();
    }
    const complete = (authorName.trim() != '' &&
        authorEmail.trim() != '' &&
        username.trim() != '' &&
        password.trim() != '' &&
        commitMsg.trim() != '');
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: styles.dataSyncBase },
            React.createElement(Button, { disabled: !repoConfigComplete, onClick: () => updateRepoConfigOpenState(!repoConfigOpenState) },
                repoConfigComplete && repoConfigOpenState ? 'Hide r' : 'R',
                "epository configuration",
                !repoConfigOpenState && repoConfigComplete ? 'â€¦' : null),
            React.createElement(Collapse, { className: styles.repoConfigCollapsible, isOpen: repoConfigOpenState },
                React.createElement(Card, { key: "repoUrl", className: styles.repoUrlCard },
                    React.createElement(FormGroup, { label: "Repository URL", helperText: React.createElement(Callout, { intent: "warning" }, "Note: resetting the URL will cause you to lose any unsubmitted changes.") },
                        React.createElement(InputGroup, { defaultValue: repoCfg.originURL || '', disabled: true, type: "text", rightElement: React.createElement(Button, { intent: "warning", minimal: true, title: "Reset repository URL. Note: you will lose any unsubmitted changes.", onClick: handleResetURL }, "Reset URL") }))),
                React.createElement(Card, { key: "repoAuth", className: styles.repoAuthCard },
                    React.createElement("div", { className: styles.dataSyncRow },
                        React.createElement(Label, { key: "username" },
                            "Git username",
                            React.createElement(InputGroup, { value: username, type: "text", onChange: (evt) => {
                                    setUsername(evt.target.value);
                                } })),
                        React.createElement(Label, { key: "password" },
                            "Password",
                            React.createElement(InputGroup, { value: password, type: "password", onChange: (evt) => {
                                    setPassword(evt.target.value);
                                } }))))),
            finished === true
                ? React.createElement(Collapse, { isOpen: !repoConfigOpenState },
                    React.createElement(Card, { key: "resultMessage", className: styles.resultCard },
                        React.createElement(Callout, { intent: errors.length > 0 ? "warning" : "success", title: errors.length > 0 ? "Errors encountered during merge sequence" : "Merge completed" }, errors.length > 0
                            ? React.createElement(UL, null, errors.map((err) => React.createElement("li", null, err)))
                            : React.createElement("p", null, "Your changes have been merged and submitted."))))
                : '',
            React.createElement(Card, { key: "committerInfo", className: styles.committerInfoCard },
                React.createElement(H4, null, "Committing changes as"),
                React.createElement("div", { className: styles.dataSyncRow },
                    React.createElement(Label, { key: "authorName" },
                        "Author name",
                        React.createElement(InputGroup, { value: authorName, type: "text", onChange: (evt) => {
                                setAuthorName(evt.target.value);
                            } })),
                    React.createElement(Label, { key: "authorEmail" },
                        "Author email",
                        React.createElement(InputGroup, { value: authorEmail, type: "email", onChange: (evt) => {
                                setAuthorEmail(evt.target.value);
                            } })))),
            React.createElement(Card, { key: "commitRow", className: styles.commitCard },
                React.createElement(H4, null, "Change notice"),
                React.createElement(FormGroup, { className: styles.formGroup, key: "commitMsg", intent: "primary" },
                    React.createElement(TextArea, { value: commitMsg, fill: true, large: true, onChange: (evt) => {
                            setCommitMsg(evt.target.value);
                        } })),
                React.createElement(Button, { className: styles.syncButton, icon: "git-merge", intent: "primary", large: true, disabled: complete === false, loading: started === true, title: "Fetch other site editors\u2019 changes, and submit yours", onClick: handleSyncAction }, "Merge Changes")))));
};
//# sourceMappingURL=data:application/json;base64,