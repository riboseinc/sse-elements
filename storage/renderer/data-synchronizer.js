import { remote, ipcRenderer } from 'electron';
import { clipboard } from 'electron';
import React, { useState } from 'react';
import { H4, Card, Label, InputGroup, FormGroup, Callout, Button } from '@blueprintjs/core';
import { useSetting } from '../../settings/renderer';
import styles from './data-synchronizer.scss';
export const DataSynchronizer = function ({ upstreamURL, inPreLaunchSetup }) {
    const [loading, setLoading] = useState(false);
    const url = useSetting('gitRepoUrl', '');
    const name = useSetting('gitAuthorName', '');
    const email = useSetting('gitAuthorEmail', '');
    const username = useSetting('gitUsername', '');
    const usingUpstream = url.value && url.value.trim() === upstreamURL.trim();
    let urlIsValid;
    try {
        if (url.value) {
            new URL(url.value.trim());
            urlIsValid = true;
        }
        else {
            urlIsValid = false;
        }
    }
    catch (e) {
        urlIsValid = false;
    }
    const complete = (urlIsValid &&
        name.value && name.value.trim() != '' &&
        email.value && email.value.trim() != '' &&
        username.value && username.value.trim() != '');
    async function handleSaveAndClose() {
        setLoading(true);
        await name.commit();
        await email.commit();
        await username.commit();
        // In pre launch we can modify URL, but updating Git config requires waiting for the app to load,
        // initializing the repo
        if (inPreLaunchSetup) {
            await url.commit();
        }
        setTimeout(() => {
            remote.getCurrentWindow().close();
        }, 2000);
    }
    async function handleResetURL() {
        await ipcRenderer.send('clear-setting', 'gitRepoUrl');
        remote.app.relaunch();
        remote.app.exit(0);
    }
    async function copyUpstreamRepoURL() {
        clipboard.writeText(upstreamURL);
    }
    return (React.createElement("div", { className: styles.dataSyncBase },
        React.createElement(Card, { key: "repoUrl", className: styles.repoUrlCard },
            React.createElement(FormGroup, { label: "Repository URL", intent: inPreLaunchSetup && !urlIsValid ? "danger" : undefined, helperText: inPreLaunchSetup
                    ? React.createElement(Callout, { intent: "primary" },
                        React.createElement("p", null, "Please enter a valid URL of the repository you have commit access to, and which is a fork of the upstream repository."),
                        React.createElement("p", null,
                            React.createElement(Button, { onClick: copyUpstreamRepoURL }, "Copy upstream repository URL")))
                    : React.createElement(Callout, { intent: "warning" }, "Note: resetting the URL will cause you to lose any unsubmitted changes.") },
                React.createElement(InputGroup, { value: url.value, placeholder: upstreamURL, disabled: inPreLaunchSetup !== true, type: "text", onChange: inPreLaunchSetup
                        ? (evt) => {
                            url.set(evt.target.value);
                        }
                        : undefined, rightElement: inPreLaunchSetup
                        ? undefined
                        : React.createElement(Button, { intent: "danger", minimal: true, title: "Reset repository URL. Note: you will lose any unsubmitted changes.", onClick: handleResetURL }, "Reset URL") }))),
        React.createElement(Card, { key: "committerInfo", className: styles.committerInfoCard },
            React.createElement(H4, null, "Committing changes as"),
            React.createElement("div", { className: styles.dataSyncRow },
                React.createElement(Label, { key: "authorName" },
                    "Author name",
                    React.createElement(InputGroup, { value: name.value, type: "text", onChange: (evt) => {
                            name.set(evt.target.value);
                        } })),
                React.createElement(Label, { key: "authorEmail" },
                    "Author email",
                    React.createElement(InputGroup, { value: email.value, type: "email", onChange: (evt) => {
                            email.set(evt.target.value);
                        } })),
                React.createElement(Label, { key: "username" },
                    "Username",
                    React.createElement(InputGroup, { value: username.value, type: "text", onChange: (evt) => {
                            username.set(evt.target.value);
                        } })))),
        React.createElement("footer", { key: "actionRow", className: styles.windowAction },
            React.createElement(Button, { className: "confirm-button", key: "confirm", large: true, fill: true, intent: !usingUpstream ? "primary" : "warning", loading: loading === true, disabled: complete !== true, onClick: handleSaveAndClose }, inPreLaunchSetup
                ? React.createElement(React.Fragment, null,
                    "Save settings using ",
                    usingUpstream ? "upstream" : "fork",
                    " repository and launch")
                : React.createElement(React.Fragment, null, "Save and close")))));
};
//# sourceMappingURL=data:application/json;base64,