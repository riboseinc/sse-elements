import { remote, ipcRenderer } from 'electron';
import React, { useEffect, useState } from 'react';
import { H4, Collapse, Card, Label, InputGroup, FormGroup, TextArea, Callout, UL, Button } from '@blueprintjs/core';
import { useWorkspaceRO } from '../../api/renderer';
import { useLocalStorage } from '../../renderer/useLocalStorage';
import styles from './data-synchronizer.scss';
const API_ENDPOINT = 'fetch-commit-push';
export const DataSynchronizer = function () {
    const [username, setUsername] = useLocalStorage('gitUsername', '');
    const [password, setPassword] = useLocalStorage('gitPassword', '');
    const [commitMsg, setCommitMsg] = useState('');
    const [authorName, setAuthorName] = useState('');
    const [authorEmail, setAuthorEmail] = useState('');
    const [repoConfigOpenState, updateRepoConfigOpenState] = useState(false);
    const [repoConfigComplete, updateRepoConfigComplete] = useState(false);
    const repoCfg = useWorkspaceRO('git-config', { originURL: undefined, author: {} });
    useEffect(() => {
        if (repoCfg.originURL !== undefined) {
            const _complete = (username.trim() !== '' &&
                password.trim() !== '' &&
                (repoCfg.originURL || '').trim() !== '');
            updateRepoConfigComplete(_complete);
            if (repoConfigOpenState === false && _complete === false) {
                updateRepoConfigOpenState(true);
            }
        }
    }, [username, password, repoCfg.originURL]);
    const [errors, setErrors] = useState([]);
    const [finished, setFinished] = useState(false);
    const [started, setStarted] = useState(false);
    if (authorName.trim() === '' && repoCfg.author.name !== undefined) {
        setAuthorName(repoCfg.author.name);
    }
    if (authorEmail.trim() === '' && repoCfg.author.email !== undefined) {
        setAuthorEmail(repoCfg.author.email);
    }
    function handleResult(evt, rawData) {
        ipcRenderer.removeListener(`workspace-${API_ENDPOINT}`, handleResult);
        const data = JSON.parse(rawData);
        setStarted(false);
        setFinished(true);
        setErrors(data.errors);
        if (data.errors.length < 1) {
            setCommitMsg('');
        }
    }
    function handleSyncAction() {
        updateRepoConfigOpenState(false);
        setErrors([]);
        ipcRenderer.on(`workspace-${API_ENDPOINT}`, handleResult);
        ipcRenderer.send(`request-workspace-${API_ENDPOINT}`, JSON.stringify({
            commitMsg,
            authorName,
            authorEmail,
            gitUsername: username,
            gitPassword: password,
        }));
        setFinished(false);
        setStarted(true);
    }
    async function handleResetURL() {
        await ipcRenderer.send('clear-setting', 'gitRepoUrl');
        remote.app.relaunch();
        remote.app.quit();
    }
    const complete = (authorName.trim() != '' &&
        authorEmail.trim() != '' &&
        username.trim() != '' &&
        password.trim() != '' &&
        commitMsg.trim() != '');
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: styles.dataSyncBase },
            React.createElement(Button, { disabled: !repoConfigComplete, onClick: () => updateRepoConfigOpenState(!repoConfigOpenState) },
                repoConfigComplete && repoConfigOpenState ? 'Hide r' : 'R',
                "epository configuration",
                !repoConfigOpenState && repoConfigComplete ? 'â€¦' : null),
            React.createElement(Collapse, { className: styles.repoConfigCollapsible, isOpen: repoConfigOpenState },
                React.createElement(Card, { key: "repoUrl", className: styles.repoUrlCard },
                    React.createElement(FormGroup, { label: "Repository URL", helperText: React.createElement(Callout, { intent: "warning" }, "Note: resetting the URL will cause you to lose any unsubmitted changes.") },
                        React.createElement(InputGroup, { defaultValue: repoCfg.originURL || '', disabled: true, type: "text", rightElement: React.createElement(Button, { intent: "warning", minimal: true, title: "Reset repository URL. Note: you will lose any unsubmitted changes.", onClick: handleResetURL }, "Reset URL") }))),
                React.createElement(Card, { key: "repoAuth", className: styles.repoAuthCard },
                    React.createElement("div", { className: styles.dataSyncRow },
                        React.createElement(Label, { key: "username" },
                            "Git username",
                            React.createElement(InputGroup, { value: username, type: "text", onChange: (evt) => {
                                    setUsername(evt.target.value);
                                } })),
                        React.createElement(Label, { key: "password" },
                            "Password",
                            React.createElement(InputGroup, { value: password, type: "password", onChange: (evt) => {
                                    setPassword(evt.target.value);
                                } }))))),
            finished === true
                ? React.createElement(Collapse, { isOpen: !repoConfigOpenState },
                    React.createElement(Card, { key: "resultMessage", className: styles.resultCard },
                        React.createElement(Callout, { intent: errors.length > 0 ? "warning" : "success", title: errors.length > 0 ? "Errors encountered during merge sequence" : "Merge completed" }, errors.length > 0
                            ? React.createElement(UL, null, errors.map((err) => React.createElement("li", null, err)))
                            : React.createElement("p", null, "Your changes have been merged and submitted."))))
                : '',
            React.createElement(Card, { key: "committerInfo", className: styles.committerInfoCard },
                React.createElement(H4, null, "Committing changes as"),
                React.createElement("div", { className: styles.dataSyncRow },
                    React.createElement(Label, { key: "authorName" },
                        "Author name",
                        React.createElement(InputGroup, { value: authorName, type: "text", onChange: (evt) => {
                                setAuthorName(evt.target.value);
                            } })),
                    React.createElement(Label, { key: "authorEmail" },
                        "Author email",
                        React.createElement(InputGroup, { value: authorEmail, type: "email", onChange: (evt) => {
                                setAuthorEmail(evt.target.value);
                            } })))),
            React.createElement(Card, { key: "commitRow", className: styles.commitCard },
                React.createElement(H4, null, "Change notice"),
                React.createElement(FormGroup, { className: styles.formGroup, key: "commitMsg", intent: "primary" },
                    React.createElement(TextArea, { value: commitMsg, fill: true, large: true, onChange: (evt) => {
                            setCommitMsg(evt.target.value);
                        } })),
                React.createElement(Button, { className: styles.syncButton, icon: "git-merge", intent: "primary", large: true, disabled: complete === false || started === true, loading: complete === false && started === true, title: "Fetch other site editors\u2019 changes, and submit yours", onClick: handleSyncAction }, "Merge Changes")))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zeW5jaHJvbml6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmFnZS9yZW5kZXJlci9kYXRhLXN5bmNocm9uaXplci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0MsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ25ELE9BQU8sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSWpFLE9BQU8sTUFBTSxNQUFNLDBCQUEwQixDQUFDO0FBRzlDLE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDO0FBSXpDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFvQztJQUMvRCxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkUsTUFBTSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsR0FBRyxlQUFlLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEdB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ZWN0cm9uJztcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSDQsIENvbGxhcHNlLCBDYXJkLCBMYWJlbCwgSW5wdXRHcm91cCwgRm9ybUdyb3VwLCBUZXh0QXJlYSwgQ2FsbG91dCwgVUwsIEJ1dHRvbiB9IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcblxuaW1wb3J0IHsgdXNlV29ya3NwYWNlUk8gfSBmcm9tICcuLi8uLi9hcGkvcmVuZGVyZXInO1xuaW1wb3J0IHsgdXNlTG9jYWxTdG9yYWdlIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvdXNlTG9jYWxTdG9yYWdlJztcblxuaW1wb3J0IHsgR2l0QXV0aG9yIH0gZnJvbSAnLi4vZ2l0JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2RhdGEtc3luY2hyb25pemVyLnNjc3MnO1xuXG5cbmNvbnN0IEFQSV9FTkRQT0lOVCA9ICdmZXRjaC1jb21taXQtcHVzaCc7XG5cblxuaW50ZXJmYWNlIERhdGFTeW5jaHJvbml6ZXJQcm9wcyB7fVxuZXhwb3J0IGNvbnN0IERhdGFTeW5jaHJvbml6ZXI6IFJlYWN0LkZDPERhdGFTeW5jaHJvbml6ZXJQcm9wcz4gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlTG9jYWxTdG9yYWdlKCdnaXRVc2VybmFtZScsICcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VMb2NhbFN0b3JhZ2UoJ2dpdFBhc3N3b3JkJywgJycpO1xuXG4gIGNvbnN0IFtjb21taXRNc2csIHNldENvbW1pdE1zZ10gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFthdXRob3JOYW1lLCBzZXRBdXRob3JOYW1lXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2F1dGhvckVtYWlsLCBzZXRBdXRob3JFbWFpbF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgW3JlcG9Db25maWdPcGVuU3RhdGUsIHVwZGF0ZVJlcG9Db25maWdPcGVuU3RhdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcmVwb0NvbmZpZ0NvbXBsZXRlLCB1cGRhdGVSZXBvQ29uZmlnQ29tcGxldGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHJlcG9DZmcgPSB1c2VXb3Jrc3BhY2VSTzx7IGF1dGhvcjogR2l0QXV0aG9yLCBvcmlnaW5VUkw6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgfT4oXG4gICAgJ2dpdC1jb25maWcnLFxuICAgIHsgb3JpZ2luVVJMOiB1bmRlZmluZWQsIGF1dGhvcjoge30gfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVwb0NmZy5vcmlnaW5VUkwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgX2NvbXBsZXRlID0gKFxuICAgICAgICB1c2VybmFtZS50cmltKCkgIT09ICcnICYmXG4gICAgICAgIHBhc3N3b3JkLnRyaW0oKSAhPT0gJycgJiZcbiAgICAgICAgKHJlcG9DZmcub3JpZ2luVVJMIHx8ICcnKS50cmltKCkgIT09ICcnKTtcblxuICAgICAgdXBkYXRlUmVwb0NvbmZpZ0NvbXBsZXRlKF9jb21wbGV0ZSk7XG4gICAgICBpZiAocmVwb0NvbmZpZ09wZW5TdGF0ZSA9PT0gZmFsc2UgJiYgX2NvbXBsZXRlID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVSZXBvQ29uZmlnT3BlblN0YXRlKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3VzZXJuYW1lLCBwYXNzd29yZCwgcmVwb0NmZy5vcmlnaW5VUkxdKTtcblxuICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGUoW10gYXMgc3RyaW5nW10pO1xuICBjb25zdCBbZmluaXNoZWQsIHNldEZpbmlzaGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3N0YXJ0ZWQsIHNldFN0YXJ0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGlmIChhdXRob3JOYW1lLnRyaW0oKSA9PT0gJycgJiYgcmVwb0NmZy5hdXRob3IubmFtZSAhPT0gdW5kZWZpbmVkKSB7IHNldEF1dGhvck5hbWUocmVwb0NmZy5hdXRob3IubmFtZSk7IH1cbiAgaWYgKGF1dGhvckVtYWlsLnRyaW0oKSA9PT0gJycgJiYgcmVwb0NmZy5hdXRob3IuZW1haWwgIT09IHVuZGVmaW5lZCkgeyBzZXRBdXRob3JFbWFpbChyZXBvQ2ZnLmF1dGhvci5lbWFpbCk7IH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoZXZ0OiBhbnksIHJhd0RhdGE6IHN0cmluZykge1xuICAgIGlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKGB3b3Jrc3BhY2UtJHtBUElfRU5EUE9JTlR9YCwgaGFuZGxlUmVzdWx0KTtcbiAgICBjb25zdCBkYXRhOiBhbnkgPSBKU09OLnBhcnNlKHJhd0RhdGEpO1xuICAgIHNldFN0YXJ0ZWQoZmFsc2UpO1xuICAgIHNldEZpbmlzaGVkKHRydWUpO1xuICAgIHNldEVycm9ycyhkYXRhLmVycm9ycyk7XG5cbiAgICBpZiAoZGF0YS5lcnJvcnMubGVuZ3RoIDwgMSkge1xuICAgICAgc2V0Q29tbWl0TXNnKCcnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTeW5jQWN0aW9uKCkge1xuICAgIHVwZGF0ZVJlcG9Db25maWdPcGVuU3RhdGUoZmFsc2UpO1xuICAgIHNldEVycm9ycyhbXSk7XG4gICAgaXBjUmVuZGVyZXIub24oYHdvcmtzcGFjZS0ke0FQSV9FTkRQT0lOVH1gLCBoYW5kbGVSZXN1bHQpO1xuICAgIGlwY1JlbmRlcmVyLnNlbmQoXG4gICAgICBgcmVxdWVzdC13b3Jrc3BhY2UtJHtBUElfRU5EUE9JTlR9YCxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY29tbWl0TXNnLFxuICAgICAgICBhdXRob3JOYW1lLFxuICAgICAgICBhdXRob3JFbWFpbCxcbiAgICAgICAgZ2l0VXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICBnaXRQYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICB9KSk7XG4gICAgc2V0RmluaXNoZWQoZmFsc2UpO1xuICAgIHNldFN0YXJ0ZWQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVSZXNldFVSTCgpIHtcbiAgICBhd2FpdCBpcGNSZW5kZXJlci5zZW5kKCdjbGVhci1zZXR0aW5nJywgJ2dpdFJlcG9VcmwnKTtcbiAgICByZW1vdGUuYXBwLnJlbGF1bmNoKCk7XG4gICAgcmVtb3RlLmFwcC5xdWl0KCk7XG4gIH1cblxuICBjb25zdCBjb21wbGV0ZSA9IChcbiAgICBhdXRob3JOYW1lLnRyaW0oKSAhPSAnJyAmJlxuICAgIGF1dGhvckVtYWlsLnRyaW0oKSAhPSAnJyAmJlxuICAgIHVzZXJuYW1lLnRyaW0oKSAhPSAnJyAmJlxuICAgIHBhc3N3b3JkLnRyaW0oKSAhPSAnJyAmJlxuICAgIGNvbW1pdE1zZy50cmltKCkgIT0gJycpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZGF0YVN5bmNCYXNlfT5cbiAgICAgICAgPEJ1dHRvbiBkaXNhYmxlZD17IXJlcG9Db25maWdDb21wbGV0ZX0gb25DbGljaz17KCkgPT4gdXBkYXRlUmVwb0NvbmZpZ09wZW5TdGF0ZSghcmVwb0NvbmZpZ09wZW5TdGF0ZSl9PlxuICAgICAgICAgIHtyZXBvQ29uZmlnQ29tcGxldGUgJiYgcmVwb0NvbmZpZ09wZW5TdGF0ZSA/ICdIaWRlIHInIDogJ1InfVxuICAgICAgICAgIGVwb3NpdG9yeSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgeyFyZXBvQ29uZmlnT3BlblN0YXRlICYmIHJlcG9Db25maWdDb21wbGV0ZSA/ICfigKYnOiBudWxsfVxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8Q29sbGFwc2UgY2xhc3NOYW1lPXtzdHlsZXMucmVwb0NvbmZpZ0NvbGxhcHNpYmxlfSBpc09wZW49e3JlcG9Db25maWdPcGVuU3RhdGV9PlxuICAgICAgICAgIDxDYXJkIGtleT1cInJlcG9VcmxcIiBjbGFzc05hbWU9e3N0eWxlcy5yZXBvVXJsQ2FyZH0+XG4gICAgICAgICAgICA8Rm9ybUdyb3VwXG4gICAgICAgICAgICAgICAgbGFiZWw9XCJSZXBvc2l0b3J5IFVSTFwiXG4gICAgICAgICAgICAgICAgaGVscGVyVGV4dD17PENhbGxvdXQgaW50ZW50PVwid2FybmluZ1wiPk5vdGU6IHJlc2V0dGluZyB0aGUgVVJMIHdpbGwgY2F1c2UgeW91IHRvIGxvc2UgYW55IHVuc3VibWl0dGVkIGNoYW5nZXMuPC9DYWxsb3V0Pn0+XG4gICAgICAgICAgICAgIDxJbnB1dEdyb3VwXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtyZXBvQ2ZnLm9yaWdpblVSTCB8fCAnJ31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgcmlnaHRFbGVtZW50PXtcbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQ9XCJ3YXJuaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFsPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVzZXQgcmVwb3NpdG9yeSBVUkwuIE5vdGU6IHlvdSB3aWxsIGxvc2UgYW55IHVuc3VibWl0dGVkIGNoYW5nZXMuXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVSZXNldFVSTH0+XG4gICAgICAgICAgICAgICAgICAgIFJlc2V0IFVSTFxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgPC9DYXJkPlxuXG4gICAgICAgICAgPENhcmQga2V5PVwicmVwb0F1dGhcIiBjbGFzc05hbWU9e3N0eWxlcy5yZXBvQXV0aENhcmR9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5kYXRhU3luY1Jvd30+XG4gICAgICAgICAgICAgIDxMYWJlbCBrZXk9XCJ1c2VybmFtZVwiPlxuICAgICAgICAgICAgICAgIEdpdCB1c2VybmFtZVxuICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dXNlcm5hbWV9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2dDogUmVhY3QuRm9ybUV2ZW50PEhUTUxFbGVtZW50PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRVc2VybmFtZSgoZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICA8TGFiZWwga2V5PVwicGFzc3dvcmRcIj5cbiAgICAgICAgICAgICAgICBQYXNzd29yZFxuICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MRWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFzc3dvcmQoKGV2dC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgPC9Db2xsYXBzZT5cblxuICAgICAgICB7ZmluaXNoZWQgPT09IHRydWVcbiAgICAgICAgICA/IDxDb2xsYXBzZSBpc09wZW49eyFyZXBvQ29uZmlnT3BlblN0YXRlfT5cbiAgICAgICAgICAgICAgPENhcmQga2V5PVwicmVzdWx0TWVzc2FnZVwiIGNsYXNzTmFtZT17c3R5bGVzLnJlc3VsdENhcmR9PlxuICAgICAgICAgICAgICAgIDxDYWxsb3V0XG4gICAgICAgICAgICAgICAgICBpbnRlbnQ9e2Vycm9ycy5sZW5ndGggPiAwID8gXCJ3YXJuaW5nXCIgOiBcInN1Y2Nlc3NcIn1cbiAgICAgICAgICAgICAgICAgIHRpdGxlPXtlcnJvcnMubGVuZ3RoID4gMCA/IFwiRXJyb3JzIGVuY291bnRlcmVkIGR1cmluZyBtZXJnZSBzZXF1ZW5jZVwiIDogXCJNZXJnZSBjb21wbGV0ZWRcIn0+XG5cbiAgICAgICAgICAgICAgICB7ZXJyb3JzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgID8gPFVMPlxuICAgICAgICAgICAgICAgICAgICAgIHtlcnJvcnMubWFwKChlcnI6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZXJyfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPC9VTD5cbiAgICAgICAgICAgICAgICAgIDogPHA+WW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBtZXJnZWQgYW5kIHN1Ym1pdHRlZC48L3A+fVxuICAgICAgICAgICAgICAgIDwvQ2FsbG91dD5cbiAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgPC9Db2xsYXBzZT5cbiAgICAgICAgICA6ICcnfVxuXG4gICAgICAgIDxDYXJkIGtleT1cImNvbW1pdHRlckluZm9cIiBjbGFzc05hbWU9e3N0eWxlcy5jb21taXR0ZXJJbmZvQ2FyZH0+XG4gICAgICAgICAgPEg0PkNvbW1pdHRpbmcgY2hhbmdlcyBhczwvSDQ+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmRhdGFTeW5jUm93fT5cbiAgICAgICAgICAgIDxMYWJlbCBrZXk9XCJhdXRob3JOYW1lXCI+XG4gICAgICAgICAgICAgIEF1dGhvciBuYW1lXG4gICAgICAgICAgICAgIDxJbnB1dEdyb3VwXG4gICAgICAgICAgICAgICAgdmFsdWU9e2F1dGhvck5hbWV9XG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZ0OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRBdXRob3JOYW1lKChldnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICA8TGFiZWwga2V5PVwiYXV0aG9yRW1haWxcIj5cbiAgICAgICAgICAgICAgQXV0aG9yIGVtYWlsXG4gICAgICAgICAgICAgIDxJbnB1dEdyb3VwXG4gICAgICAgICAgICAgICAgdmFsdWU9e2F1dGhvckVtYWlsfVxuICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldnQ6IFJlYWN0LkZvcm1FdmVudDxIVE1MRWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgICAgICAgIHNldEF1dGhvckVtYWlsKChldnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQ2FyZD5cblxuICAgICAgICA8Q2FyZCBrZXk9XCJjb21taXRSb3dcIiBjbGFzc05hbWU9e3N0eWxlcy5jb21taXRDYXJkfT5cbiAgICAgICAgICA8SDQ+Q2hhbmdlIG5vdGljZTwvSDQ+XG5cbiAgICAgICAgICA8Rm9ybUdyb3VwXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmZvcm1Hcm91cH1cbiAgICAgICAgICAgICAga2V5PVwiY29tbWl0TXNnXCJcbiAgICAgICAgICAgICAgaW50ZW50PVwicHJpbWFyeVwiPlxuICAgICAgICAgICAgPFRleHRBcmVhXG4gICAgICAgICAgICAgIHZhbHVlPXtjb21taXRNc2d9XG4gICAgICAgICAgICAgIGZpbGw9e3RydWV9XG4gICAgICAgICAgICAgIGxhcmdlPXt0cnVlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2dDogUmVhY3QuRm9ybUV2ZW50PEhUTUxFbGVtZW50PikgPT4ge1xuICAgICAgICAgICAgICAgIHNldENvbW1pdE1zZygoZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnN5bmNCdXR0b259XG4gICAgICAgICAgICBpY29uPVwiZ2l0LW1lcmdlXCJcbiAgICAgICAgICAgIGludGVudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgbGFyZ2U9e3RydWV9XG4gICAgICAgICAgICBkaXNhYmxlZD17Y29tcGxldGUgPT09IGZhbHNlIHx8IHN0YXJ0ZWQgPT09IHRydWV9XG4gICAgICAgICAgICBsb2FkaW5nPXtjb21wbGV0ZSA9PT0gZmFsc2UgJiYgc3RhcnRlZCA9PT0gdHJ1ZX1cbiAgICAgICAgICAgIHRpdGxlPVwiRmV0Y2ggb3RoZXIgc2l0ZSBlZGl0b3Jz4oCZIGNoYW5nZXMsIGFuZCBzdWJtaXQgeW91cnNcIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU3luY0FjdGlvbn0+TWVyZ2UgQ2hhbmdlczwvQnV0dG9uPlxuICAgICAgICA8L0NhcmQ+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG4iXX0=