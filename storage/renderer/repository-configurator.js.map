{"version":3,"file":"repository-configurator.js","sourceRoot":"","sources":["../../../src/storage/renderer/repository-configurator.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC1B,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAO/C,MAAM,CAAC,MAAM,sBAAsB,GAA0C,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE;IAC9G,MAAM,GAAG,GAAG,UAAU,CAAS,YAAY,EAAE,UAAU,CAAC,CAAC;IAEzD,KAAK,UAAU,gBAAgB;QAC7B,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;QACnB,MAAM,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,UAAmB,CAAC;IACxB,IAAI;QACF,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,UAAU,GAAG,IAAI,CAAC;KACnB;IAAC,OAAO,CAAC,EAAE;QACV,UAAU,GAAG,KAAK,CAAC;KACpB;IAED,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE,CAAC;IAE7D,OAAO,CACL;QACE,6BAAK,SAAS,EAAE,SAAS;YACvB,oBAAC,SAAS,IACN,GAAG,EAAC,KAAK,EACT,KAAK,EAAC,gBAAgB,EACtB,UAAU,EAAC,uGAAuG,EAClH,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;gBAC3C,oBAAC,UAAU,IACT,KAAK,EAAE,GAAG,CAAC,KAAK,EAChB,GAAG,EAAC,UAAU,EACd,KAAK,EAAE,IAAI,EACX,IAAI,EAAC,KAAK,EACV,WAAW,EAAE,UAAU,EACvB,QAAQ,EAAE,CAAC,GAAiC,EAAE,EAAE;wBAC9C,GAAG,CAAC,GAAG,CAAE,GAAG,CAAC,MAA2B,CAAC,KAAe,CAAC,CAAC;oBAC5D,CAAC,GACD,CACQ;YAEZ,oBAAC,MAAM,IACH,SAAS,EAAC,gBAAgB,EAC1B,GAAG,EAAC,SAAS,EACb,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EAC9C,KAAK,EAAE,IAAI,EACX,QAAQ,EAAE,UAAU,KAAK,IAAI,EAC7B,OAAO,EAAE,gBAAgB,IAC1B,CAAC,aAAa,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,iCAAiC,CAChF,CACL,CACL,CACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { URL } from 'url';\nimport { remote } from 'electron';\nimport React from 'react';\nimport { FormGroup, InputGroup, Button } from '@blueprintjs/core';\nimport { useSetting } from 'settings/renderer';\n\n\ninterface RepositoryConfiguratorProps {\n  defaultUrl: string;\n  className: string;\n}\nexport const RepositoryConfigurator: React.FC<RepositoryConfiguratorProps> = function ({ defaultUrl, className }) {\n  const url = useSetting<string>('gitRepoUrl', defaultUrl);\n\n  async function handleSaveAction() {\n    await url.commit();\n    remote.getCurrentWindow().hide();\n  }\n\n  let urlIsValid: boolean;\n  try {\n    new URL(url.value);\n    urlIsValid = true;\n  } catch (e) {\n    urlIsValid = false;\n  }\n\n  const usingUpstream = url.value.trim() === defaultUrl.trim();\n\n  return (\n    <>\n      <div className={className}>\n        <FormGroup\n            key=\"url\"\n            label=\"Repository URL\"\n            helperText=\"Please enter a valid URL of the repository you have commit access to, or leave empty to use upstream.\"\n            intent={urlIsValid ? \"primary\" : \"danger\"}>\n          <InputGroup\n            value={url.value}\n            key=\"username\"\n            large={true}\n            type=\"url\"\n            placeholder={defaultUrl}\n            onChange={(evt: React.FormEvent<HTMLElement>) => {\n              url.set((evt.target as HTMLInputElement).value as string);\n            }}\n          />\n        </FormGroup>\n\n        <Button\n            className=\"confirm-button\"\n            key=\"confirm\"\n            intent={!usingUpstream ? \"primary\" : \"warning\"}\n            large={true}\n            disabled={urlIsValid !== true}\n            onClick={handleSaveAction}>\n          {!usingUpstream ? \"Launch with this repository URL\" : \"Launch with upstream repository\"}\n        </Button>\n      </div>\n    </>\n  );\n};\n"]}