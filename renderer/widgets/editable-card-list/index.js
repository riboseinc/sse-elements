import React from 'react';
import { Card, Text, Button } from '@blueprintjs/core';
import styles from './styles.scss';
export const AddCardTrigger = function ({ onClick, highlight, label }) {
    return (React.createElement("div", { className: styles.addCardTriggerContainer },
        React.createElement(AddCardTriggerButton, { onClick: onClick, highlight: highlight, label: label })));
};
// If using separately from AddCardTrigger, wrap into element with addCardTriggerContainer class
export const AddCardTriggerButton = function ({ onClick, highlight, label }) {
    return React.createElement(Button, { icon: "plus", onClick: onClick, text: highlight ? (label || undefined) : undefined, minimal: highlight ? true : undefined, title: label ? label.toString() : "", intent: highlight ? "primary" : undefined, className: `${styles.addCardTrigger} ${highlight ? styles.addCardTriggerHighlighted : ''}` });
};
export const SimpleEditableCard = function (props) {
    return (React.createElement(Card, { className: `
          ${styles.editableCard}
          ${props.selected ? styles.editableCardSelected : ''}
          ${props.extended ? styles.editableCardExtended : ''}
          ${props.onSelect ? styles.editableCardSelectable : ''}
          ${props.onDelete ? styles.editableCardDeletable : ''}
        `, onClick: props.onSelect },
        React.createElement(Text, { ellipsize: true }, props.children),
        props.onDelete
            ? React.createElement(Button, { onClick: (evt) => {
                    props.onDelete ? props.onDelete() : void 0;
                    evt.stopPropagation();
                    return false;
                }, intent: "danger", icon: "cross", className: styles.editableCardDeleteButton, minimal: true, small: true })
            : ''));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyZXIvd2lkZ2V0cy9lZGl0YWJsZS1jYXJkLWxpc3QvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFVbkMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFrQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7SUFDbEcsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBRSxNQUFNLENBQUMsdUJBQXVCO1FBQzVDLG9CQUFDLG9CQUFvQixJQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFJLENBQzFFLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUdGLGdHQUFnRztBQUNoRyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBa0MsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFO0lBQ3hHLE9BQU8sb0JBQUMsTUFBTSxJQUNaLElBQUksRUFBQyxNQUFNLEVBQ1gsT0FBTyxFQUFFLE9BQU8sRUFDaEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDbEQsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ3JDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUNwQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDekMsU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQzFGLENBQUM7QUFDTCxDQUFDLENBQUM7QUFTRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBc0MsVUFBVSxLQUFLO0lBQ2xGLE9BQU8sQ0FDTCxvQkFBQyxJQUFJLElBQ0QsU0FBUyxFQUFFO1lBQ1AsTUFBTSxDQUFDLFlBQVk7WUFDbkIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2pELEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbkQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ3JELEVBQ0QsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRO1FBRXpCLG9CQUFDLElBQUksSUFBQyxTQUFTLEVBQUUsSUFBSSxJQUNsQixLQUFLLENBQUMsUUFBUSxDQUNWO1FBRU4sS0FBSyxDQUFDLFFBQVE7WUFDYixDQUFDLENBQUMsb0JBQUMsTUFBTSxJQUNMLE9BQU8sRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO29CQUNwQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMzQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQ3RCLE9BQU8sS0FBSyxDQUFDO2dCQUNmLENBQUMsRUFDRCxNQUFNLEVBQUMsUUFBUSxFQUNmLElBQUksRUFBQyxPQUFPLEVBQ1osU0FBUyxFQUFFLE1BQU0sQ0FBQyx3QkFBd0IsRUFDMUMsT0FBTyxFQUFFLElBQUksRUFDYixLQUFLLEVBQUUsSUFBSSxHQUNYO1lBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FFRCxDQUNSLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2FyZCwgVGV4dCwgQnV0dG9uIH0gZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcblxuXG5pbnRlcmZhY2UgQWRkQ2FyZFRyaWdnZXJQcm9wcyB7XG4gIG9uQ2xpY2s/OiAoLi4uYXJnczogYW55W10pID0+IHZvaWQsXG4gIGhpZ2hsaWdodD86IGJvb2xlYW4sXG4gIGxhYmVsPzogc3RyaW5nIHwgSlNYLkVsZW1lbnQsXG59XG5cblxuZXhwb3J0IGNvbnN0IEFkZENhcmRUcmlnZ2VyOiBSZWFjdC5GQzxBZGRDYXJkVHJpZ2dlclByb3BzPiA9IGZ1bmN0aW9uICh7IG9uQ2xpY2ssIGhpZ2hsaWdodCwgbGFiZWwgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWRkQ2FyZFRyaWdnZXJDb250YWluZXJ9PlxuICAgICAgPEFkZENhcmRUcmlnZ2VyQnV0dG9uIG9uQ2xpY2s9e29uQ2xpY2t9IGhpZ2hsaWdodD17aGlnaGxpZ2h0fSBsYWJlbD17bGFiZWx9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5cbi8vIElmIHVzaW5nIHNlcGFyYXRlbHkgZnJvbSBBZGRDYXJkVHJpZ2dlciwgd3JhcCBpbnRvIGVsZW1lbnQgd2l0aCBhZGRDYXJkVHJpZ2dlckNvbnRhaW5lciBjbGFzc1xuZXhwb3J0IGNvbnN0IEFkZENhcmRUcmlnZ2VyQnV0dG9uOiBSZWFjdC5GQzxBZGRDYXJkVHJpZ2dlclByb3BzPiA9IGZ1bmN0aW9uICh7IG9uQ2xpY2ssIGhpZ2hsaWdodCwgbGFiZWwgfSkge1xuICByZXR1cm4gPEJ1dHRvblxuICAgIGljb249XCJwbHVzXCJcbiAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgIHRleHQ9e2hpZ2hsaWdodCA/IChsYWJlbCB8fCB1bmRlZmluZWQpIDogdW5kZWZpbmVkfVxuICAgIG1pbmltYWw9e2hpZ2hsaWdodCA/IHRydWUgOiB1bmRlZmluZWR9XG4gICAgdGl0bGU9e2xhYmVsID8gbGFiZWwudG9TdHJpbmcoKSA6IFwiXCJ9XG4gICAgaW50ZW50PXtoaWdobGlnaHQgPyBcInByaW1hcnlcIiA6IHVuZGVmaW5lZH1cbiAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5hZGRDYXJkVHJpZ2dlcn0gJHtoaWdobGlnaHQgPyBzdHlsZXMuYWRkQ2FyZFRyaWdnZXJIaWdobGlnaHRlZCA6ICcnfWB9XG4gIC8+O1xufTtcblxuXG5pbnRlcmZhY2UgU2ltcGxlRWRpdGFibGVDYXJkUHJvcHMge1xuICBzZWxlY3RlZD86IGJvb2xlYW4sXG4gIG9uRGVsZXRlPzogKCkgPT4gdm9pZCxcbiAgb25TZWxlY3Q/OiAoKSA9PiB2b2lkIFxuICBleHRlbmRlZD86IGJvb2xlYW47XG59XG5leHBvcnQgY29uc3QgU2ltcGxlRWRpdGFibGVDYXJkOiBSZWFjdC5GQzxTaW1wbGVFZGl0YWJsZUNhcmRQcm9wcz4gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Q2FyZFxuICAgICAgICBjbGFzc05hbWU9e2BcbiAgICAgICAgICAke3N0eWxlcy5lZGl0YWJsZUNhcmR9XG4gICAgICAgICAgJHtwcm9wcy5zZWxlY3RlZCA/IHN0eWxlcy5lZGl0YWJsZUNhcmRTZWxlY3RlZCA6ICcnfVxuICAgICAgICAgICR7cHJvcHMuZXh0ZW5kZWQgPyBzdHlsZXMuZWRpdGFibGVDYXJkRXh0ZW5kZWQgOiAnJ31cbiAgICAgICAgICAke3Byb3BzLm9uU2VsZWN0ID8gc3R5bGVzLmVkaXRhYmxlQ2FyZFNlbGVjdGFibGUgOiAnJ31cbiAgICAgICAgICAke3Byb3BzLm9uRGVsZXRlID8gc3R5bGVzLmVkaXRhYmxlQ2FyZERlbGV0YWJsZSA6ICcnfVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXtwcm9wcy5vblNlbGVjdH0+XG5cbiAgICAgIDxUZXh0IGVsbGlwc2l6ZT17dHJ1ZX0+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvVGV4dD5cblxuICAgICAge3Byb3BzLm9uRGVsZXRlXG4gICAgICAgID8gPEJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KGV2dDogYW55KSA9PiB7XG4gICAgICAgICAgICAgIHByb3BzLm9uRGVsZXRlID8gcHJvcHMub25EZWxldGUoKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgaW50ZW50PVwiZGFuZ2VyXCJcbiAgICAgICAgICAgIGljb249XCJjcm9zc1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5lZGl0YWJsZUNhcmREZWxldGVCdXR0b259XG4gICAgICAgICAgICBtaW5pbWFsPXt0cnVlfVxuICAgICAgICAgICAgc21hbGw9e3RydWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgOiAnJ31cblxuICAgIDwvQ2FyZD5cbiAgKTtcbn07XG4iXX0=